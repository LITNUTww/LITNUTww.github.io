<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUAA Data structure 1st assignment</title>
      <link href="/2022/03/10/BUAA_1st_assmt/"/>
      <url>/2022/03/10/BUAA_1st_assmt/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>本系列是BUAA数据结构与程序设计课程课后作业的分析与讨论，旨在对代码和思想进行总结和归纳，便于日后回顾。也为需要的朋友们提供参考。<strong>（切忌抄袭，BUAA有非常严格的查重系统！）</strong> <strong>相关参考资料会以链接的形式放在文字中间。</strong></p><h1 id="扩展字符a"><a class="markdownIt-Anchor" href="#扩展字符a"></a> 扩展字符A</h1><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>从键盘输入包含扩展符’-'的字符串，将其扩展为等价的完整字符，例如将a-d扩展为abcd，并输出扩展后的字符串。</p><p>要求：只处理[a-z]、[A-Z]、[0-9]范围内的字符扩展，即只有当扩展符前后的字符同时是小写字母、大写字母或数字，并且扩展符后的字符大于扩展符前的字符时才进行扩展，其它情况不进行扩展，原样输出。例如：a-R、D-e、0-b、4-B等字符串都不进行扩展。</p><h2 id="输入与输出"><a class="markdownIt-Anchor" href="#输入与输出"></a> 输入与输出</h2><p>【输入形式】<br />从键盘输入包含扩展符的字符串<br />【输出形式】<br />输出扩展后的字符串</p><p>【输入样例1】<br />ADEa-g-m02<br />【输出样例1】<br />ADEabcdefghijklm02</p><p>【输入样例2】<br />cdeT-bcd<br />【输出样例2】<br />cdeT-bcd</p><h2 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h2><p>将样例1的输入ADEa-g-m02扩展为：ADEabcdefghijklm02；样例2的输入cdeT-bcd中，扩展符前的字符为大写字母，扩展符后的字符为小写字母，不在同一范围内，所以不进行扩展。</p><h2 id="评分标准"><a class="markdownIt-Anchor" href="#评分标准"></a> 评分标准</h2><p>该题要求扩展字符，提交程序文件expand.c。</p><h2 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h2><p>题目表述很明确，输入字符串后进行遍历，找到<code>-</code>后判断左右两字符是否符合扩展的条件，符合的扩展输出，不符合则按原样输出。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> str[<span class="number">1000</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">expand</span><span class="params">(<span class="type">char</span> [],<span class="type">int</span> )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i]==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">islower</span>(str[i<span class="number">-1</span>])&amp;&amp;<span class="built_in">islower</span>(str[i+<span class="number">1</span>])&amp;&amp;str[i<span class="number">-1</span>]&lt;str[i+<span class="number">1</span>])</span><br><span class="line">                expand(str, i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isupper</span>(str[i<span class="number">-1</span>])&amp;&amp;<span class="built_in">isupper</span>(str[i+<span class="number">1</span>])&amp;&amp;str[i<span class="number">-1</span>]&lt;str[i+<span class="number">1</span>])</span><br><span class="line">                expand(str, i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(str[i<span class="number">-1</span>])&amp;&amp;<span class="built_in">isdigit</span>(str[i+<span class="number">1</span>])&amp;&amp;str[i<span class="number">-1</span>]&lt;str[i+<span class="number">1</span>])</span><br><span class="line">                expand(str, i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">expand</span><span class="params">(<span class="type">char</span> s[],<span class="type">int</span> idx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span> (ch = s[idx - <span class="number">1</span>] + <span class="number">1</span>; ch &lt; s[idx + <span class="number">1</span>]; ch++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：char类型进行加减运算，本质上是对其ASCII码进行运算。<br />详见：<a href="https://blog.csdn.net/unix21/article/details/8606684?utm_medium=distribute.pc_relevant.none-task-blog-2baidujs_baidulandingword~default-1.pc_relevant_antiscanv2&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">https://blog.csdn.net/unix21/article/details/8606684?utm_medium=distribute.pc_relevant.none-task-blog-2baidujs_baidulandingword~default-1.pc_relevant_antiscanv2&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a></p><h1 id="表达式计算无括号"><a class="markdownIt-Anchor" href="#表达式计算无括号"></a> 表达式计算（无括号）</h1><h2 id="问题描述-2"><a class="markdownIt-Anchor" href="#问题描述-2"></a> 问题描述</h2><p>从标准输入中读入一个整数算术运算表达式，如5 - 1 * 2 * 3 + 12 / 2 / 2  = 。计算表达式结果，并输出。</p><h2 id="输入与输出-2"><a class="markdownIt-Anchor" href="#输入与输出-2"></a> 输入与输出</h2><p>【输入形式】<br />在控制台中输入一个以’=’结尾的整数算术运算表达式。</p><p>【输出形式】<br />向控制台输出计算结果（为整数）。</p><p>【样例1输入】<br />5 - 1 * 2 * 3 + 12 / 2 / 2  =</p><p>【样例1输出】<br />2</p><p>【样例2输入】<br />500 =</p><p>【样例2输出】<br />500</p><p>【样例1说明】<br />输入的表达式为5 - 1 * 2 * 3 + 12 / 2 / 2 =，按照整数运算规则，计算结果为2，故输出2。</p><p>【样例2说明】<br />输入的表达式为500 = ，没有运算符参与运算，故直接输出500</p><h2 id="算法提示"><a class="markdownIt-Anchor" href="#算法提示"></a> 算法提示</h2><p>1、可以利用gets函数，读取整行表达式；<br />2、对于空格，可以考虑首先去除表达式中的所有空格<br />3、可以设一计数器用来记录已读取、但未参加运算的运算符的个数，根据该计数器来判断如何进行运算；<br />4、可以设计一函数：实现二元整数算术运算。</p><h2 id="评分标准-2"><a class="markdownIt-Anchor" href="#评分标准-2"></a> 评分标准</h2><p>该题要求输出整数表达式的计算结果，共有5个测试点。上传C语言文件名为example1c.c。</p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：循环读入表达式中的字符，并且实时计算表达式，进行更新。将复杂的表达式拆分成三个数字三个数字一组，进行运算优先级的判断，如果是左边的优先级高，</span></span><br><span class="line"><span class="comment">//就把左边的数和中间的数进行运算，结果传递给左边的数，右边的数值赋给中间的数；如果第二个算符的优先级较高，就计算中间的和右边的数，结果传递给中间的数</span></span><br><span class="line"><span class="comment">//进行下一轮循环，直至最后的符号是‘=’</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">char</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">input_num</span><span class="params">()</span>;</span><br><span class="line"><span class="type">char</span> <span class="title function_">input_op</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left, right, mid; <span class="comment">//左中右三个数</span></span><br><span class="line">    <span class="type">char</span> fro, back; <span class="comment">//前后两个运算符</span></span><br><span class="line">    left = input_num(); <span class="comment">// 读入左边的数</span></span><br><span class="line">    fro = input_op();   <span class="comment">//读入第一个运算符</span></span><br><span class="line">    <span class="keyword">if</span> (fro == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, left); <span class="comment">//第一种情况 500 =</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mid = input_num(); <span class="comment">//不是第一种情况则继续读入之后的运算符和数字</span></span><br><span class="line">        back = input_op();</span><br><span class="line">        <span class="keyword">if</span> (back == <span class="string">&#x27;=&#x27;</span>) <span class="comment">//第二种情况 1 + 1 =</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, calculate(left, mid, fro));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//以下才是混合运算的情况</span></span><br><span class="line">            <span class="keyword">while</span> (back != <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                right = input_num();</span><br><span class="line">                <span class="keyword">if</span> (((fro == <span class="string">&#x27;*&#x27;</span> || fro == <span class="string">&#x27;/&#x27;</span>) &amp;&amp; (back == <span class="string">&#x27;*&#x27;</span> || back == <span class="string">&#x27;/&#x27;</span>)) || ((fro == <span class="string">&#x27;+&#x27;</span> || fro == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (back == <span class="string">&#x27;+&#x27;</span> || back == <span class="string">&#x27;-&#x27;</span>)) || ((fro == <span class="string">&#x27;*&#x27;</span> || fro == <span class="string">&#x27;/&#x27;</span>) &amp;&amp; (back == <span class="string">&#x27;+&#x27;</span> || back == <span class="string">&#x27;-&#x27;</span>)))<span class="comment">//左边运算优先级高</span></span><br><span class="line">                &#123; </span><br><span class="line">                    left = calculate(left, mid, fro);</span><br><span class="line">                    mid = right;</span><br><span class="line">                    fro = back;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((fro == <span class="string">&#x27;+&#x27;</span> || fro == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (back == <span class="string">&#x27;*&#x27;</span> || back == <span class="string">&#x27;/&#x27;</span>))<span class="comment">//右边运算优先级高</span></span><br><span class="line">                &#123;</span><br><span class="line">                    mid = calculate(mid, right, back);</span><br><span class="line">                &#125;</span><br><span class="line">                back = input_op();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, calculate(left, mid, fro));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//独立函数，进行二元计算</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">char</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> resl;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        resl = a + b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        resl = a - b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        resl = a * b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        resl = a / b;</span><br><span class="line">    <span class="keyword">return</span> resl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">input_num</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数：解决空格问题</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">input_op</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> op = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (op == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        op = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> op;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>难点：实时更新表达式的值的算法不好想，人类处理混合运算的时候会优先挑选整个表达式中的<code>*</code>和<code>/</code>运算，算出来之后再算<code>+</code>和<code>-</code>。如果按照这种思路，程序必须遍历整个表达式寻找<code>*</code>和<code>/</code>，并且将字符串形式的字符通过算法转化为整数计算。</p><p>因此我们要充分认识程序相对于人类思维方式的不同，程序的基本结构只有三种，顺序、循环和条件。以上代码的算法就是结合了这三种结构的优势设计的。</p><p>附上第二种解法的代码，转载自：<a href="https://blog.csdn.net/weixin_45927469/article/details/106868644">https://blog.csdn.net/weixin_45927469/article/details/106868644</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> str[<span class="number">1028</span>], fir[<span class="number">1028</span>], type[<span class="number">1028</span>], pmtype[<span class="number">2018</span>];</span><br><span class="line"><span class="type">int</span> numb[<span class="number">1028</span>], pmnumb[<span class="number">1028</span>];</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    fgets(str, <span class="number">1028</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            fir[j++] = str[i];</span><br><span class="line">    &#125; <span class="comment">// printf(&quot;%s&quot;,fir);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, l = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(fir); i++, j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fir[i] == <span class="string">&#x27;+&#x27;</span> || fir[i] == <span class="string">&#x27;-&#x27;</span> || fir[i] == <span class="string">&#x27;*&#x27;</span> || fir[i] == <span class="string">&#x27;/&#x27;</span> ||</span><br><span class="line">            fir[i] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            type[k++] = fir[i];</span><br><span class="line">        <span class="keyword">if</span> (fir[i] &gt;= <span class="number">48</span> &amp;&amp; fir[i] &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> length = <span class="number">1</span>; length &lt; <span class="number">11</span>; length++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fir[i + length] &gt;= <span class="number">48</span> &amp;&amp; fir[i + length] &lt;= <span class="number">57</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> n = <span class="number">1</span>, num = <span class="number">0</span>, w;</span><br><span class="line">                <span class="keyword">for</span> (w = length; w &gt; <span class="number">0</span>; w--) &#123;</span><br><span class="line">                    num += (fir[i + w - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) * n;</span><br><span class="line">                    n *= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                numb[l++] = num;</span><br><span class="line">                i += length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (fir[i + length] &lt; <span class="number">48</span> || fir[i + length] &gt; <span class="number">57</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;strlen(type);i++)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%c &quot;,type[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;strlen(type)+1;i++)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%d &quot;,numb[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(type) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type[i] == <span class="string">&#x27;+&#x27;</span> || type[i] == <span class="string">&#x27;-&#x27;</span> || type[i] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">            pmnumb[j] = numb[i];</span><br><span class="line">            pmtype[j] = type[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type[i] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            numb[i + <span class="number">1</span>] *= numb[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            numb[i + <span class="number">1</span>] = numb[i] / numb[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> put = pmnumb[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(pmtype); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pmtype[i] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            put += pmnumb[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pmtype[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            put -= pmnumb[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, put);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小数形式与科学计数法转换简"><a class="markdownIt-Anchor" href="#小数形式与科学计数法转换简"></a> 小数形式与科学计数法转换（简）</h1><h2 id="问题描述-3"><a class="markdownIt-Anchor" href="#问题描述-3"></a> 问题描述</h2><p>编写一个程序，将用小数表示的浮点数，转换成科学计数法的形式输出。输入的数据没有符号，小数点前后必有数字，且全为有效数据，即小数点后的末尾数字不为0；小数点前若只有一位数字，可以为0，否则小数点前的最高位数字不为0。<br />提示：以字符串形式保存相关数据</p><h2 id="输入与输出-3"><a class="markdownIt-Anchor" href="#输入与输出-3"></a> 输入与输出</h2><p>【输入形式】<br />从控制台输入一小数，最后有回车换行符，所有输入的字符数不会超过100。</p><p>【输出形式】<br />以科学计数法形式输出数据。输出的数据由以下几部分构成：<br />1.底数部分是一个小数或整数，若为小数，则小数点前后必有数字，而且都为有效数字。即：小数点前只有一位大于0的数字，小数点后的末尾数字不能为0。若为整数，则只有一位数字，不带小数点。<br />2.必有小写字母“e”。<br />3.指数部分是一个整数，若大于等于0，则不带正号“+”。若小于0，则需要带负号“-”，且整数的最高位数字不为0。</p><p>【输入样例1】<br />0.000000000000002</p><p>【输出样例1】<br />2e-15</p><p>【输入样例2】<br />8.9845623489651700659</p><p>【输出样例2】<br />8.9845623489651700659e0</p><p>【输入样例3】<br />367298599999093453490394859509568659795603.4</p><p>【输出样例3】<br />3.672985999990934534903948595095686597956034e41</p><h2 id="样例说明-2"><a class="markdownIt-Anchor" href="#样例说明-2"></a> 样例说明</h2><p>以小数形式输入数据，然后转换成科学计数法形式输出。</p><h2 id="评分标准-3"><a class="markdownIt-Anchor" href="#评分标准-3"></a> 评分标准</h2><p>该题要求以科学计数法形式输出数据，提交程序文件名为notation.c。</p><h2 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//科学计数法</span></span><br><span class="line"><span class="comment">/*分情况讨论</span></span><br><span class="line"><span class="comment">首先是小数点前只有一位0的情况：该种情况只需输出小数点后有效数字，指数为0的个数，需要判断是否输出小数点，如果只有一位有效数字，则不输出小数点。</span></span><br><span class="line"><span class="comment">第二种情况是小数点前不是0：指数为小数点前数字的个数减一*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> str[<span class="number">150</span>];</span><br><span class="line"><span class="type">char</span> zhishu[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, count_1 = <span class="number">0</span>, i, j, k;</span><br><span class="line">    <span class="type">char</span> mi;</span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)  <span class="comment">//小数点前只有一位为零</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]&gt;=<span class="string">&#x27;1&#x27;</span>&amp;&amp;str[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count_1++;           <span class="comment">//统计该数字共有几个非零数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; !(str[i] &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;        <span class="comment">//统计该数字第一位有效数字前有几个零</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]); <span class="comment">//输出第一位有效数字</span></span><br><span class="line">        <span class="keyword">if</span>(count_1&gt;<span class="number">1</span>)  <span class="comment">//判断是否输出小数点 像0.0003不输出小数点，0.0342却需要。</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;.&quot;</span>);   </span><br><span class="line">       &#125; </span><br><span class="line">        <span class="keyword">for</span> (i = i + <span class="number">1</span>; i &lt; <span class="built_in">strlen</span>(str); i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);    <span class="comment">//输出剩下的有效数字</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;e-%d&quot;</span>, count);      <span class="comment">//输出指数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">//小数点前非零情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; str[i] != <span class="string">&#x27;.&#x27;</span>; i++)</span><br><span class="line">            ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c.&quot;</span>, str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; <span class="built_in">strlen</span>(str); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;e%d&quot;</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此题不难，想好分类讨论的方案就行了。</p><h1 id="超长整数的减法"><a class="markdownIt-Anchor" href="#超长整数的减法"></a> 超长整数的减法</h1><h2 id="问题描述-4"><a class="markdownIt-Anchor" href="#问题描述-4"></a> 问题描述</h2><p>编写程序实现两个超长正整数（每个最长80位数字）的减法运算。</p><h2 id="输入输出"><a class="markdownIt-Anchor" href="#输入输出"></a> 输入输出</h2><p>【输入形式】</p><p>从键盘读入两个整数，要考虑输入高位可能为0的情况（如00083）。</p><ol><li>第一行是超长正整数A；</li><li>第二行是超长正整数B；</li></ol><p>【输出形式】<br />输出只有一行，是长整数A减去长整数B的运算结果，从高到低依次输出各位数字。要求：若结果为0，则只输出一个0；否则输出的结果的最高位不能为0，并且各位数字紧密输出。</p><p>【输入样例】<br />234098<br />134098703578230056</p><p>【输出样例】<br />-134098703577995958</p><h2 id="样例说明-3"><a class="markdownIt-Anchor" href="#样例说明-3"></a> 样例说明</h2><p>进行两个正整数减法运算， 234098 －134098703578230056 = －134098703577995958。</p><h2 id="评分标准-4"><a class="markdownIt-Anchor" href="#评分标准-4"></a> 评分标准</h2><p>完全正确得20分，每个测试点4分，提交程序文件名为subtract.c。</p><h2 id="代码实现-4"><a class="markdownIt-Anchor" href="#代码实现-4"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del_zeo</span><span class="params">(<span class="type">char</span> *a)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b, <span class="type">int</span> len_1, <span class="type">int</span> len_2)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addzeo</span><span class="params">(<span class="type">int</span> len1, <span class="type">int</span> len2, <span class="type">char</span> *str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span> *a)</span>;</span><br><span class="line"><span class="type">int</span> len; <span class="comment">//商的长度</span></span><br><span class="line"><span class="type">char</span> shang[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> num_1[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> num_2[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> len_1;</span><br><span class="line">    <span class="type">int</span> len_2; <span class="comment">//两个字符串的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    gets(num_1);</span><br><span class="line">    gets(num_2);    <span class="comment">// 输入两个超长整数</span></span><br><span class="line">    del_zeo(num_1); <span class="comment">//如果整数前面有莫名其妙的0，就把它删除了</span></span><br><span class="line">    del_zeo(num_2);</span><br><span class="line">    len_1 = <span class="built_in">strlen</span>(num_1);</span><br><span class="line">    len_2 = <span class="built_in">strlen</span>(num_2);</span><br><span class="line">    size = compare(num_1, num_2, len_1, len_2); <span class="comment">//比较两数的大小</span></span><br><span class="line">    reverse(num_1);</span><br><span class="line">    reverse(num_2);</span><br><span class="line">    len = len_1;</span><br><span class="line">    len = len_1 &gt; len_2 ? len_1 : len_2;</span><br><span class="line">    <span class="keyword">if</span> (len_2 &gt; len_1) <span class="comment">//补零 为减法做准备</span></span><br><span class="line">        addzeo(len_1, len_2, num_1);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (len_2 &lt; len_1)</span><br><span class="line">        addzeo(len_2, len_1, num_2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (size)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//当前者大于后者时，相减为正</span></span><br><span class="line">    &#123;</span><br><span class="line">        subtract(num_1, num_2);</span><br><span class="line">        reverse(shang);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, shang[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        subtract(num_2, num_1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        reverse(shang);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; shang[i] == <span class="string">&#x27;0&#x27;</span>; i++)</span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; len; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, shang[i]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for (int i = 0; i &lt; strlen(num_1); i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%c&quot;, num_1[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del_zeo</span><span class="params">(<span class="type">char</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; a[i] == <span class="string">&#x27;0&#x27;</span>; i++)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="built_in">strlen</span>(a); i++)</span><br><span class="line">        a[j++] = a[i];</span><br><span class="line">    a[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比大小函数  输出1，前者大后者小，相减为正 ；输出0，后者大前者小，相减为负；输出2，相等</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b, <span class="type">int</span> len_1, <span class="type">int</span> len_2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len_1 &lt; len_2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (len_2 &lt; len_1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len_1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; b[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串反转函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">strlen</span>(a) - <span class="number">1</span>, j = <span class="number">0</span>; i &gt; j; i--, j++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[j];</span><br><span class="line">        a[j] = a[i];</span><br><span class="line">        a[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//补零函数：将反转之后的长度较小的字符串补零之与长度较长的字符串相同的长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addzeo</span><span class="params">(<span class="type">int</span> len1, <span class="type">int</span> len2, <span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1; i &lt; len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法函数,计算大减小。算法是列竖式，一位一位减，不够了借位，从字符串的末尾开始减</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, x, y;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = a[k] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        y = b[k] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= y)</span><br><span class="line">            shang[k] = x - y + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            shang[k] = x + <span class="number">10</span> - y + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            a[k + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    shang[k] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全排列数生成"><a class="markdownIt-Anchor" href="#全排列数生成"></a> 全排列数生成</h1><h2 id="问题描述-5"><a class="markdownIt-Anchor" href="#问题描述-5"></a> 问题描述</h2><p>输入整数N( 1 &lt;= N &lt;= 10 )，生成从1~N所有整数的全排列</p><h2 id="输入与输出-4"><a class="markdownIt-Anchor" href="#输入与输出-4"></a> 输入与输出</h2><p>输入形式】输入整数N。<br />【输出形式】输出有N!行，每行都是从1~N所有整数的一个全排列，各整数之间以空格分隔。各行上的全排列不重复。输出各行遵循“小数优先”原则, 在各全排列中，较小的数尽量靠前输出。如果将每行上的输出看成一个数字，则所有输出构成升序数列。具体格式见输出样例。<br />【样例输入1】1<br />【样例输出1】1<br />【样例说明1】输入整数N=1，其全排列只有一种。<br />【样例输入2】3<br />【样例输出2】<br />1 2 3<br />1 3 2<br />2 1 3<br />2 3 1<br />3 1 2<br />3 2 1<br />【样例说明2】输入整数N=3，要求整数1、2、3的所有全排列, 共有N!=6行。且先输出1开头的所有排列数，再输出2开头的所有排列数，最后输出3开头的所有排列数。在以1开头的所有全排列中同样遵循此原则。<br />【样例输入3】10<br />【样例输出3】<br />1 2 3 4 5 6 7 8 9 10<br />1 2 3 4 5 6 7 8 10 9<br />1 2 3 4 5 6 7 9 8 10<br />1 2 3 4 5 6 7 9 10 8<br />1 2 3 4 5 6 7 10 8 9<br />1 2 3 4 5 6 7 10 9 8<br />1 2 3 4 5 6 8 7 9 10<br />1 2 3 4 5 6 8 7 10 9<br />1 2 3 4 5 6 8 9 7 10<br />1 2 3 4 5 6 8 9 10 7<br />……………………</p><h2 id="运行时限"><a class="markdownIt-Anchor" href="#运行时限"></a> 运行时限</h2><p>要求每次运行时间限制在20秒之内。超出该时间则认为程序错误。提示：当N增大时，运行时间将急剧增加。在编程时要注意尽量优化算法，提高运行效率。</p><h2 id="评分标准-5"><a class="markdownIt-Anchor" href="#评分标准-5"></a> 评分标准</h2><p>该题要求输出若干行整数。</p><h2 id="代码实现-5"><a class="markdownIt-Anchor" href="#代码实现-5"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成全排列</span></span><br><span class="line"><span class="comment">//采用回溯算法，生成排列就输出。然后回溯到上层，递归结束的条件是递归层数为最大数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">500</span>];</span><br><span class="line"><span class="type">int</span> temp[<span class="number">500</span>]; <span class="comment">// 该数组编号指代全排列数列中的每一个数</span></span><br><span class="line">               <span class="comment">// 置1则已经使用过，没有使用过置0</span></span><br><span class="line"><span class="type">int</span> max;</span><br><span class="line"><span class="type">void</span> <span class="title function_">permutation</span><span class="params">(<span class="type">int</span> depth)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (depth == max + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= max; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历n个数，没用过将之放进array里面，然后置1，表示已经用过，直到最终生成一个全排列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= max; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">array</span>[depth] = i;       <span class="comment">//</span></span><br><span class="line">            temp[i] = <span class="number">1</span>;            <span class="comment">//标记该数字已经用过。</span></span><br><span class="line">            permutation(depth + <span class="number">1</span>); <span class="comment">//该处产生递归，层层深入会直接生成一个全排列输出，生成全排列后层层返回</span></span><br><span class="line">            temp[i] = <span class="number">0</span>;            <span class="comment">// 这一步比较难理解，每一层permutation return 之后进入这一步，将最后一次使用的数字置零，是一个回溯的步骤</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max);</span><br><span class="line">    permutation(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全排列数的生成属于“树”的内容，常用算法有两种，广度优先遍历和深度优先遍历。详见：<a href="https://blog.csdn.net/zhouEnshen/article/details/116244724">https://blog.csdn.net/zhouEnshen/article/details/116244724</a><br />这个题目需要多调试，看看数据结构究竟是怎么样的，递归返回到了什么地方。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么我要写Blog</title>
      <link href="/2022/03/08/hello-world/"/>
      <url>/2022/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>表达是人的愿望。在今天看来，写作并非是最高效的，但却是最有头脑的。有才华的人一定有很多想要表达的东西。</p><p>我们每一天都能遇到很多的人和事，大部分都匆匆而过，只有很少，或是灵感，或是反思，能再记忆中留下印记。</p><p>有了新想法，新点子，第二天就忘了；今天备战高考的学弟问了一个问题，回答过程中自己的认识也有所提高，很值得记录下来；今天做了一道比较难的算法题，解法很有新意，但不久之后就忘了。和好朋友吹自己做了怎样怎样牛逼的梦，结果也就这么两个人知道。</p><p>也许，多年后回头，能够再次感受那充满青春的大学时光，记忆要是能够在清晰一点多好。</p><p>有的人运营微信公众号，在里面记录自己的生活；有的人创建抖音号，用短视频抓拍有趣的时光。写作，我认为是最适合有自己的学习和工作但同时有一点闲时间的人的一种表现形式。为什么不用短视频，因为看短视频的成本很低，人心比较浮躁，很难静下心来去认真品味。阅读就不一样，愿意写作和阅读的人，是渴求知识的，是探索生活的，是动脑子的。我希望自己是这一部分人，也希望和这一部分人交朋友。如果您和我有一样的想法，我会非常开心。</p><p>为什么要建博客？作为软件工程专业的学生连小小的博客都不会建真的是太逊了。里面的内容有机会也会上传至CSDN，简书，公众号等平台，自己的博客就是自己的一个DIY空间，不必遵循各大平台的规则和用户的喜好。现实里买不起房，互联网上却能搭一个“房子”，何乐而不为？😄</p>]]></content>
      
      
      <categories>
          
          <category> 生活&amp;感悟 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
