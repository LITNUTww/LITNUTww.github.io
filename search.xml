<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUAA 数据结构第四次作业</title>
      <link href="/2022/05/10/BUAA_4th_assmt/"/>
      <url>/2022/05/10/BUAA_4th_assmt/</url>
      
        <content type="html"><![CDATA[<h1 id="栈操作基本题"><a class="markdownIt-Anchor" href="#栈操作基本题"></a> 栈操作（基本题）</h1><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>假设给定的整数栈初始状态为空，栈的最大容量为100。从标准输入中输入一组栈操作，按操作顺序输出出栈元素序列。栈操作：1表示入栈操作，后跟一个整数（不为1、0和-1）为入栈元素；0表示出栈操作；-1表示操作结束。</p><h2 id="输入与输出"><a class="markdownIt-Anchor" href="#输入与输出"></a> 输入与输出</h2><p>【输入形式】<br />从标准输入读取一组栈操作，入栈的整数和表示栈操作的整数之间都以一个空格分隔。</p><p>【输出形式】<br />在一行上按照操作的顺序输出出栈元素序列，以一个空格分隔各元素，最后一个元素后也要有一个空格。如果栈状态为空时进行出栈操作，或栈满时进行入栈操作，则输出字符串“error”，并且字符串后也要有一空格。所有操作都执行完后，栈也有可能不为空。</p><p>【样例输入】</p><p>1 3 1 5 1 7 0 0 1 8 0 1 12 1 13 0 0 0 0 1 90 1 89 0 -1</p><p>【样例输出】</p><p>7 5 8 13 12 3 error 89</p><h2 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h2><p>入栈元素依次为3、5、7，然后有两次出栈动作，所以先输出7和5，这时栈中只有元素3；之后元素8入栈，又出栈，输出8；随后元素12和13入栈，再进行4次出栈操作，输出13、12和3，这时栈为空，再进行出栈操作会输出error；最后90和89入栈，进行一次出栈操作，输出89，栈中剩余1个元素。</p><h2 id="评分标准"><a class="markdownIt-Anchor" href="#评分标准"></a> 评分标准</h2><p>该题要求按照操作的顺序输出出栈元素序列，提交程序名为stack.c。</p><h2 id="算法分析"><a class="markdownIt-Anchor" href="#算法分析"></a> 算法分析</h2><p>没什么好说的，基本操作</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">stack</span>[<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> a, num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;a);</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//入栈</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;num);</span><br><span class="line">            <span class="built_in">stack</span>[++top] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;error &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">stack</span>[top--]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 出栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c程序括号匹配检查"><a class="markdownIt-Anchor" href="#c程序括号匹配检查"></a> C程序括号匹配检查</h1><h2 id="问题描述-2"><a class="markdownIt-Anchor" href="#问题描述-2"></a> 问题描述</h2><p>编写一程序检查C源程序文件中{}、()等括号是否匹配,并输出第一个检测到的不匹配的括号及所对应括号所在的行号（程序中只有一个括号不匹配）。<br />注意：</p><p>1.除了括号可能不匹配外，输入的C源程序无其它语法错误。</p><p>2.字符常量、字符串常量及注释中括号不应被处理，注释包括单行注释//和多行/* */注释</p><p>3.字符常量和字符串常量中不包含转义字符’和&quot;；</p><p>4.程序中出现有意义括号的个数不超过200个；</p><p>不匹配判断规则：</p><p>1.当检测的程序括号为’{‘时，若其前序尚未匹配的括号为’(‘时，输出该’('左括号及所在行号；</p><p>2.当遇到一个不匹配的右括号’)‘或’}'时，输出该右括号及所在行号；</p><p>3.当程序处理完毕时，还存在不匹配的左括号时，输出该左括号及所在行号。</p><p>##输入与输出<br />【输入形式】<br />打开当前目录下文件example.c，查询其括号是否匹配。该文件中每行字符数不超过200。</p><p>【输出形式】<br />若存在括号不匹配时，应输出首先能判断出现不匹配的括号及其所在的行号。当出现括号不匹配时，按下面要求输出相关信息：</p><p>without maching <x> at line <n></p><p>其中<x>为‘{’, ‘}’， ‘(’, ‘)’等符号，<n>为该符号所在的行号。</p><p>若整个程序括号匹配，则按下面所示顺序输出括号匹配情况，中间没有空格。</p><p>(){(()){}}</p><p>【样例输入1】<br />若当前目录下输入文件example.c中内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#123; hello world &#125;\n&quot;</span>); <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>【样例输出1】</p><p>without maching ‘)’ at line 4</p><p>【样例输入2】</p><p>若当前目录下输入文件example.c中内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#123; hello world &#125;d\n&quot;</span>); <span class="comment">/* &#125;*/</span></span><br></pre></td></tr></table></figure><p>【样例输出2】</p><p>without maching ‘{’ at line 2</p><p>【样例输入3】</p><p>若当前目录下输入文件example.c中内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#123; hello world &#125;d\n&quot;</span>); <span class="comment">/* &#125;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【样例输出3】</p><p>(){()}</p><h2 id="样例说明-2"><a class="markdownIt-Anchor" href="#样例说明-2"></a> 样例说明</h2><p>样例1：在注释部分和字符串中的括号不考虑，在将程序处理之后得到的括号序列是（）{（）），遇到右括号时与最近的左括号匹配，发现最后一个小括号和大括号不匹配。</p><p>样例2：处理之后的括号序列是（）{（），在最后缺少了右大括号，那么应该输出与之相对应的左括号不匹配。</p><h2 id="评分标准-2"><a class="markdownIt-Anchor" href="#评分标准-2"></a> 评分标准</h2><p>通过所有测试点得满分</p><h2 id="算法分析-2"><a class="markdownIt-Anchor" href="#算法分析-2"></a> 算法分析</h2><p>其实就是匹配规则<br />1.当检测的程序括号为’{‘时，若其前序尚未匹配的括号为’(‘时，输出该’('左括号及所在行号；</p><p>2.当遇到一个不匹配的右括号’)‘或’}'时，输出该右括号及所在行号；</p><p>3.当程序处理完毕时，还存在不匹配的左括号时，输出该左括号及所在行号<br />数据结构使用结构体数组构造栈。</p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> str[<span class="number">205</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> kh;</span><br><span class="line">    <span class="type">int</span> line;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">buffer</span> <span class="title">B</span>;</span></span><br><span class="line">B stack_1[<span class="number">210</span>];</span><br><span class="line">B stack_2[<span class="number">210</span>];</span><br><span class="line"><span class="type">int</span> top_1 = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> top_2 = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag_1 = <span class="number">0</span>, error = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lines = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(<span class="string">&quot;example.c&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(str, <span class="number">205</span>, fp) != <span class="literal">NULL</span> <span class="comment">/*fgets(str, 205, stdin) != NULL*/</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (error == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="number">205</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = i + <span class="number">2</span>; j &lt; <span class="built_in">strlen</span>(str); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str[j] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; str[j + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag_1 = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (flag_1 == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="number">205</span>);</span><br><span class="line">                    fgets(str, <span class="number">204</span>, fp);</span><br><span class="line">                    <span class="comment">// fgets(str, 205, stdin);</span></span><br><span class="line">                    lines++;</span><br><span class="line">                    flag_1 = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(str); j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (str[j] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; str[j + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag_1 = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                i = j + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; <span class="built_in">strlen</span>(str); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str[j] == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                i = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;\&#x27;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; <span class="built_in">strlen</span>(str); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str[j] == <span class="string">&#x27;\&#x27;&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                i = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                top_1++;</span><br><span class="line">                top_2++;</span><br><span class="line">                stack_1[top_1].kh = str[i];</span><br><span class="line">                stack_2[top_2].kh = str[i];</span><br><span class="line">                stack_1[top_1].line = lines;</span><br><span class="line">                stack_2[top_2].line = lines;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (top_1 != <span class="number">-1</span> &amp;&amp; stack_1[top_1].kh == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;without maching &#x27;(&#x27; at line %d&quot;</span>, stack_1[top_1].line);</span><br><span class="line">                    error = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    top_1++;</span><br><span class="line">                    top_2++;</span><br><span class="line">                    stack_1[top_1].kh = str[i];</span><br><span class="line">                    stack_2[top_2].kh = str[i];</span><br><span class="line">                    stack_1[top_1].line = lines;</span><br><span class="line">                    stack_2[top_2].line = lines;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stack_2[++top_2].kh = str[i];</span><br><span class="line">                <span class="keyword">if</span> (stack_1[top_1].kh == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stack_1[top_1--].kh = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;without maching &#x27;)&#x27; at line %d&quot;</span>, lines);</span><br><span class="line">                    error = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stack_2[++top_2].kh = str[i];</span><br><span class="line">                <span class="keyword">if</span> (stack_1[top_1].kh == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stack_1[top_1--].kh = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;without maching &#x27;&#125;&#x27; at line %d&quot;</span>, lines);</span><br><span class="line">                    error = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="number">205</span>);</span><br><span class="line">        lines++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (error != <span class="number">1</span> &amp;&amp; top_1 == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= top_2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, stack_2[i].kh);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (error != <span class="number">1</span> &amp;&amp; top_1 == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;without maching &#x27;%c&#x27; at line %d&quot;</span>, stack_1[top_1].kh, stack_1[top_1].line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算器表达式计算-后缀表达式实现结果为浮点"><a class="markdownIt-Anchor" href="#计算器表达式计算-后缀表达式实现结果为浮点"></a> 计算器（表达式计算-后缀表达式实现，结果为浮点）</h1><p>##问题描述</p><p>从标准输入中读入一个算术运算表达式，如：24 / ( 1 + 5/3 + 36 / 6 / 2 - 2) * ( 12 / 2 / 2 )= ，计算表达式结果，并输出。</p><p>要求：</p><p>1、表达式运算符只有+、-、*、/，表达式末尾的=字符表示表达式输入结束，表达式中可能会出现空格；<br />2、表达式中会出现圆括号，括号可能嵌套，不会出现错误的表达式；</p><p>3、表达式中出现的操作数都是十进制整数常量；但要求运算结果为浮点型，例如：5/2结果应为2.5。</p><p>4、要求采用逆波兰表达式来实现表达式计算。</p><h2 id="输入与输出-2"><a class="markdownIt-Anchor" href="#输入与输出-2"></a> 输入与输出</h2><p>【输入形式】</p><p>从键盘输入一个以=结尾的算术运算表达式。操作符和操作数之间可以有空格分隔。</p><p>【输出形式】</p><p>在屏幕上输出计算结果，小数点后保留两位有效数字。</p><p>【样例输入】</p><p>24 / ( 1 + 5/3 + 36 / 6 / 2 - 2) * ( 12 / 2 / 2 )     =</p><p>【样例输出】</p><p>19.64<br />##样例说明</p><p>按照运算符及括号优先级依次计算表达式的值。<br />##评分标准</p><p>该题要求采用逆波兰表达式实现表达式运算，提交程序名为cal.c。</p><h2 id="算法分析-3"><a class="markdownIt-Anchor" href="#算法分析-3"></a> 算法分析</h2><p><img src="https://cdn.jsdelivr.net/gh/LITNUTww/picturedemo/img/calculate_2022_05_10.png" alt="" /><br />采用ppt代码架构</p><h2 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义栈</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> DataType;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">symbol</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    NUM,</span><br><span class="line">    OP,</span><br><span class="line">    EQ,</span><br><span class="line">    OTHER</span><br><span class="line">&#125;; <span class="comment">//枚举符号类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">oper</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    EPT,</span><br><span class="line">    LEFT,</span><br><span class="line">    RIGHT,</span><br><span class="line">    ADD,</span><br><span class="line">    MIN,</span><br><span class="line">    MUL,</span><br><span class="line">    DIV</span><br><span class="line">&#125;;                                     <span class="comment">//枚举运算符，括号和等号视为运算符</span></span><br><span class="line"><span class="type">int</span> Pri[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>&#125;; <span class="comment">//运算符优先级</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">sym</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType num;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">oper</span> <span class="title">op</span>;</span></span><br><span class="line">&#125;;                                  <span class="comment">//符号有两类，分别是运算数和运算符</span></span><br><span class="line">DataType Num_stack[MAX];            <span class="comment">//数据栈</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">oper</span> <span class="title">Op_stack</span>[<span class="title">MAX</span>];</span>            <span class="comment">//符号栈</span></span><br><span class="line"><span class="type">int</span> Ntop = <span class="number">-1</span>;                      <span class="comment">//数据栈顶指示器</span></span><br><span class="line"><span class="type">int</span> Otop = <span class="number">-1</span>;<span class="comment">//符号栈顶指示器</span></span><br><span class="line"><span class="keyword">enum</span> symbol <span class="title function_">getSym</span><span class="params">(<span class="keyword">union</span> sym *item)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">operate</span><span class="params">(<span class="keyword">enum</span> oper op)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">compute</span><span class="params">(<span class="keyword">enum</span> oper op)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushNum</span><span class="params">(DataType num)</span>;</span><br><span class="line">DataType <span class="title function_">popNum</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushOp</span><span class="params">(<span class="keyword">enum</span> oper op)</span>;</span><br><span class="line"><span class="keyword">enum</span> oper <span class="title function_">popOp</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">enum</span> oper <span class="title function_">topOp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">sym</span> <span class="title">item</span>;</span> <span class="comment">//</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">symbol</span> <span class="title">s</span>;</span>  <span class="comment">//</span></span><br><span class="line">    <span class="keyword">while</span> ((s = getSym(&amp;item))!= EQ)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == NUM)</span><br><span class="line">        &#123;</span><br><span class="line">            pushNum(item.num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == OP)</span><br><span class="line">        &#123;</span><br><span class="line">            operate(item.op);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Wrong in expression&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (Otop &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        compute(popOp());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Ntop == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>, popNum());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Wrong in expression&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> symbol <span class="title function_">getSym</span><span class="params">(<span class="keyword">union</span> sym *item)</span> <span class="comment">//读入表达式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c, n;</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (n = <span class="number">0</span>; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = getchar())</span><br><span class="line">            &#123;</span><br><span class="line">                n = n * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ungetc(c, <span class="built_in">stdin</span>);</span><br><span class="line">            item-&gt;num = n;</span><br><span class="line">            <span class="keyword">return</span> NUM;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (c)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                item-&gt;op = ADD;</span><br><span class="line">                <span class="keyword">return</span> OP;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                item-&gt;op = MIN;</span><br><span class="line">                <span class="keyword">return</span> OP;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                item-&gt;op = MUL;</span><br><span class="line">                <span class="keyword">return</span> OP;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                item-&gt;op = DIV;</span><br><span class="line">                <span class="keyword">return</span> OP;</span><br><span class="line">            <span class="comment">/*case &#x27;%&#x27;:</span></span><br><span class="line"><span class="comment">                item-&gt;op = MOD;</span></span><br><span class="line"><span class="comment">                return OP;*/</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                item-&gt;op = LEFT;</span><br><span class="line">                <span class="keyword">return</span> OP;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                item-&gt;op = RIGHT;</span><br><span class="line">                <span class="keyword">return</span> OP;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> OTHER;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EQ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">operate</span><span class="params">(<span class="keyword">enum</span> oper op)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (op == RIGHT) <span class="comment">//</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">oper</span> <span class="title">c</span>;</span></span><br><span class="line">        <span class="keyword">while</span> ((c = popOp()) != LEFT)</span><br><span class="line">        &#123;</span><br><span class="line">            compute(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Otop == <span class="number">-1</span> || op == LEFT)</span><br><span class="line">    &#123;</span><br><span class="line">        pushOp(op);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (Otop &gt;= <span class="number">0</span> &amp;&amp; Pri[topOp()] &gt;= Pri[op])</span><br><span class="line">        &#123;</span><br><span class="line">            compute(popOp());</span><br><span class="line">        &#125;</span><br><span class="line">        pushOp(op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">compute</span><span class="params">(<span class="keyword">enum</span> oper op)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataType tmp;</span><br><span class="line">    <span class="keyword">switch</span> (op)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD:</span><br><span class="line">        pushNum(popNum() + popNum());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MIN:</span><br><span class="line">        tmp = popNum();</span><br><span class="line">        pushNum(popNum() - tmp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MUL:</span><br><span class="line">        pushNum(popNum() * popNum());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   <span class="comment">/* case MOD:</span></span><br><span class="line"><span class="comment">        tmp = popNum();</span></span><br><span class="line"><span class="comment">        pushNum(popNum() % tmp);</span></span><br><span class="line"><span class="comment">        break;*/</span></span><br><span class="line">    <span class="keyword">case</span> DIV:</span><br><span class="line">        tmp = popNum();</span><br><span class="line">        pushNum(popNum() / tmp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LEFT:</span><br><span class="line">    <span class="keyword">case</span> EPT:</span><br><span class="line">    <span class="keyword">case</span> RIGHT:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据栈操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pushNum</span><span class="params">(DataType num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Ntop == MAX - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Data stack is full&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Num_stack[++Ntop] = num;</span><br><span class="line">&#125;</span><br><span class="line">DataType <span class="title function_">popNum</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Ntop == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Wrong in expression&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Num_stack[Ntop--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运算符栈操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pushOp</span><span class="params">(<span class="keyword">enum</span> oper op)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Otop == MAX - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;operator stack is full&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Op_stack[++Otop] = op;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> oper <span class="title function_">popOp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Otop != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Op_stack[Otop--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EPT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> oper <span class="title function_">topOp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Op_stack[Otop];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文本编辑操作模拟简a"><a class="markdownIt-Anchor" href="#文本编辑操作模拟简a"></a> 文本编辑操作模拟（简）a</h1><h2 id="问题描述-3"><a class="markdownIt-Anchor" href="#问题描述-3"></a> 问题描述</h2><p>编写一程序模拟文本编辑操作。首先从标准输入读取一行字符串（字符个数不超过512），该行字符串是已经过n（大于0，小于等于10）步编辑操作后的结果。然后从下一行读取n，以及已发生过的n步编辑操作，编辑操作分行输入，输入格式为：</p><p>op pos str</p><p>其中op为编辑操作命令编码（在此只有插入和删除操作，1表示插入或2表示删除操作）；pos表示插入或删除的位置；str表示已经插入或删除的字符串（中间没有空格）。各数据间以一个空格分隔。</p><p>然后在空一行后，再分行输入当前将要进行的编辑操作，包括如下四种操作（操作编码分别为：1表示插入，2表示删除操作，3表示撤销（即undo操作），-1表示结束）：</p><p>1 pos str</p><p>表示将在pos位置插入字符串str（中间没有空格），各数据间以一个空格分隔；</p><p>2 pos n</p><p>表示将从pos位置开始删除n个字符（各数据间以一个空格分隔），若要删除的字符个数多于已有字符个数（即在文本中从pos开始的字符个数小于n），则按实际字符数删除即可。（提示：为了能够撤销删除操作，应按“2 pos str”形式保存命令。）</p><p>3</p><p>表示撤销最近执行的插入或删除操作，可以进行多次撤销操作，注意：也可以撤销之前已经发生过的n步编辑操作中的操作。</p><p>-1</p><p>表示退出编辑操作，在屏幕上输出最终编辑后的文本。</p><p>要求：</p><p>1、上述所有输入的编辑操作中的字符串str都不包含空白字符（空格符、制表符或换行符）；</p><p>2、插入操作中的位置pos大于等于0，并且小于等于当前文本的字符个数；0位置表示文本第一个字符的位置；若pos为当前文本的字符个数，则表示在文本最后插入字符串；</p><p>3、删除操作中的位置pos大于等于0，并且小于当前文字的字符个数；</p><p>4、若已无操作可撤销，则再进行撤销操作无效；</p><p>5、文本在编辑过程中，总字符个数不会超过512。</p><h2 id="输入与输出-3"><a class="markdownIt-Anchor" href="#输入与输出-3"></a> 输入与输出</h2><p>【输入形式】</p><p>先从键盘输入一行字符串，表示已经经过n步编辑操作后的文本串，然后在下一行输入一个正整数n，并分行输入n步插入或删除操作（表示按时间先后顺序已进行的操作），格式如上所述。随后空一行，再分行输入将要进行的编辑操作，格式如上所述。直到输入-1操作为止。</p><p>【输出形式】</p><p>在屏幕上输出最终编辑后的文本内容。</p><p>【样例输入】</p><p>A Stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle.???</p><p>4</p><p>1 20 ainer</p><p>2 0 ???</p><p>1 85 -</p><p>1 99 (LIFO)</p><p>3</p><p>2 110 10</p><p>1 110 Objects</p><p>2 98 1</p><p>2 0 1</p><p>2 108 10</p><p>3</p><p>3</p><p>3</p><p>-1</p><p>【样例输出】</p><p>A Stack is a container of objects that are inserted and removed according to the last-in first-out  principle.Objects</p><h2 id="样例说明-3"><a class="markdownIt-Anchor" href="#样例说明-3"></a> 样例说明</h2><p>第一行输入的文本串是先后经过下面4次编辑操作后得到的：先在20位置插入了字符串ainer，然后删除了开始位置的字符串???，随后在85位置插入了一个字符-，最后在99位置插入了字符串(LIFO)。</p><p>随后输入了撤销操作，即撤销先前最后进行的“1 99 (LIFO)”操作，也就是将99位置的6个字符删除；</p><p>2 110 10：将文本串最后的字符串???删除；</p><p>1 110 Objects：在文本串末尾插入字符串Objects；</p><p>随后执行了三次删除操作，又执行了三次撤销操作，最后输入的-1表示编辑操作结束，在屏幕上输出最终编辑后的文本串。</p><h2 id="评分标准-3"><a class="markdownIt-Anchor" href="#评分标准-3"></a> 评分标准</h2><p>该程序要求编程模拟编辑操作，提交程序文件名为edit.c。</p><h2 id="算法分析-4"><a class="markdownIt-Anchor" href="#算法分析-4"></a> 算法分析</h2><p>数据结构使用结构数组构造栈，栈的每一层存储操作数，删除的位置，要插入/删除的字串以及当前操作后的新生成的串</p><h2 id="代码实现-4"><a class="markdownIt-Anchor" href="#代码实现-4"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 520</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> op; <span class="comment">//1为插入 2为删除 </span></span><br><span class="line">    <span class="type">int</span> pos; <span class="comment">//删除的位置</span></span><br><span class="line">    <span class="type">char</span> str[MAXLEN]; <span class="comment">//要插入或删除的字符串</span></span><br><span class="line">    <span class="type">char</span> s[MAXLEN];   <span class="comment">//当前步骤后的串</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> <span class="title">S</span>;</span></span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    S <span class="built_in">stack</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> <span class="built_in">string</span>[MAXLEN];</span><br><span class="line">    <span class="type">char</span> temp[MAXLEN];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">//获得原始字符串</span></span><br><span class="line">    gets(<span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入n</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">//设置栈顶变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        top++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %s&quot;</span>, &amp;<span class="built_in">stack</span>[top].op, &amp;<span class="built_in">stack</span>[top].pos, <span class="built_in">stack</span>[top].str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//吸收换行符</span></span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="built_in">stack</span>[top].s, <span class="built_in">string</span>); </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// push</span></span><br><span class="line">            top++;</span><br><span class="line">            <span class="built_in">stack</span>[top].op = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot; %d %s&quot;</span>, &amp;<span class="built_in">stack</span>[top].pos, <span class="built_in">stack</span>[top].str);</span><br><span class="line">            <span class="comment">// insert</span></span><br><span class="line">            <span class="built_in">strcpy</span>(temp, <span class="built_in">stack</span>[top - <span class="number">1</span>].s);</span><br><span class="line">            <span class="built_in">strncpy</span>(<span class="built_in">stack</span>[top].s, temp, <span class="built_in">stack</span>[top].pos);</span><br><span class="line">            <span class="built_in">strcat</span>(<span class="built_in">stack</span>[top].s, <span class="built_in">stack</span>[top].str);</span><br><span class="line">            <span class="built_in">strcat</span>(<span class="built_in">stack</span>[top].s, temp + <span class="built_in">stack</span>[top].pos);</span><br><span class="line">            <span class="built_in">memset</span>(temp, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// push</span></span><br><span class="line">            top++;</span><br><span class="line">            <span class="built_in">stack</span>[top].op = <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot; %d %s&quot;</span>, &amp;<span class="built_in">stack</span>[top].pos, <span class="built_in">stack</span>[top].str);</span><br><span class="line">            <span class="type">int</span> num = atoi(<span class="built_in">stack</span>[top].str);</span><br><span class="line">            <span class="comment">//如果要删除的字符比pos后剩下的字符还多，就全部删完</span></span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="built_in">strlen</span>(<span class="built_in">stack</span>[top - <span class="number">1</span>].s) - <span class="built_in">stack</span>[top].pos)</span><br><span class="line">            &#123;</span><br><span class="line">                num = <span class="built_in">strlen</span>(<span class="built_in">stack</span>[top - <span class="number">1</span>].s) - <span class="built_in">stack</span>[top].pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// delet</span></span><br><span class="line">            <span class="built_in">strcpy</span>(temp, <span class="built_in">stack</span>[top - <span class="number">1</span>].s);</span><br><span class="line">            <span class="built_in">strncpy</span>(<span class="built_in">stack</span>[top].s, temp, <span class="built_in">stack</span>[top].pos);</span><br><span class="line">            <span class="built_in">strcat</span>(<span class="built_in">stack</span>[top].s, temp + <span class="built_in">stack</span>[top].pos + num);</span><br><span class="line">            <span class="built_in">memset</span>(temp, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// pop</span></span><br><span class="line">            <span class="keyword">if</span> (top &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (top &gt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                top--;  <span class="comment">//如果撤消的不是最开始的几步，那么只需要退栈，因为栈的每一层都放好了当前步骤后的串</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">//如果撤销的是最开始的几步，因为栈最开始的几层栈并没有存储当前步骤后串的内容，需要重新修改</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">stack</span>[top].op == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//撤销插入即删除</span></span><br><span class="line">                    <span class="type">int</span> num = <span class="built_in">strlen</span>(<span class="built_in">stack</span>[top].str);</span><br><span class="line">                    top--;</span><br><span class="line">                    <span class="built_in">strcpy</span>(temp, <span class="built_in">stack</span>[top + <span class="number">1</span>].s);</span><br><span class="line">                    <span class="built_in">strncpy</span>(<span class="built_in">stack</span>[top].s, temp, <span class="built_in">stack</span>[top + <span class="number">1</span>].pos);</span><br><span class="line">                    <span class="built_in">strcat</span>(<span class="built_in">stack</span>[top].s, temp + <span class="built_in">stack</span>[top + <span class="number">1</span>].pos + num);</span><br><span class="line">                    <span class="built_in">memset</span>(temp, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">stack</span>[top].op == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//撤销删除即插入</span></span><br><span class="line">                    top--;</span><br><span class="line">                    <span class="built_in">strcpy</span>(temp, <span class="built_in">stack</span>[top + <span class="number">1</span>].s);</span><br><span class="line">                    <span class="built_in">strncpy</span>(<span class="built_in">stack</span>[top].s, temp, <span class="built_in">stack</span>[top + <span class="number">1</span>].pos);</span><br><span class="line">                    <span class="built_in">strcat</span>(<span class="built_in">stack</span>[top].s, <span class="built_in">stack</span>[top + <span class="number">1</span>].str);</span><br><span class="line">                    <span class="built_in">strcat</span>(<span class="built_in">stack</span>[top].s, temp + <span class="built_in">stack</span>[top + <span class="number">1</span>].pos);</span><br><span class="line">                    <span class="built_in">memset</span>(temp, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="built_in">stack</span>[top].s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="银行排队模拟生产者-消费者模拟"><a class="markdownIt-Anchor" href="#银行排队模拟生产者-消费者模拟"></a> 银行排队模拟（生产者-消费者模拟）</h1><h2 id="问题描述-4"><a class="markdownIt-Anchor" href="#问题描述-4"></a> 问题描述</h2><p>一个系统模仿另一个系统行为的技术称为模拟，如飞行模拟器。模拟可以用来进行方案论证、人员培训和改进服务。计算机技术常用于模拟系统中。</p><p>生产者-消费者（Server-Custom）是常见的应用模式，见于银行、食堂、打印机、医院、超等提供服务和使用服务的应用中。这类应用的主要问题是消费者如果等待（排队）时间过长，会引发用户抱怨，影响服务质量；如果提供服务者（服务窗口）过多，将提高运管商成本。（经济学中排队论）</p><p>假设某银行网点有五个服务窗口，分别为三个对私、一个对公和一个外币窗口。银行服务的原则是先来先服务。通常对私业务人很多，其它窗口人则较少，可临时改为对私服务。假设当对私窗口等待服务的客户（按实际服务窗口）平均排队人数超过（大于或等于）7人时，等待客户将可能有抱怨，影响服务质量，此时银行可临时将其它窗口中一个或两个改为对私服务，当客户少于7人时，将立即恢复原有业务。设计一个程序用来模拟银行服务。</p><p>说明：</p><ol><li><p>增加服务窗口将会增加成本或影响其它业务，因此，以成本增加或影响最小为原则来增加服务窗口，即如果增加一个窗口就能使得按窗口平均等待服务人数小于7人，则只增加一个窗口。一旦按窗口平均等待服务人数小于7人，就减少一个所增加的窗口。</p></li><li><p>为了简化问题，假设新到客户是在每个服务周期开始时到达。</p></li><li><p>当等待服务人数发生变化时（新客户到达或有客户已接受服务），则及时计算按实际服务窗口平均等待服务人数，并按相应策略调整服务窗口数（增加或减少额外的服务窗口，但对私窗口不能减少）。注意：只在获取新客户（不管到达新客户数是否为0）时或已有客户去接受服务时，才按策略调整服务窗口数。进一步讲，增加服务窗口只在有客户到达的周期内进行（也就是说增加窗口是基于客户的感受，银行对增加窗口是不情愿的，因为要增加成本，一旦不再有新客户来，银行是不会再增加服务窗口的）；一旦有客户去接受服务（即等待客户减少），银行将根据策略及时减少服务窗口，因此，在每个周期内，有客户去接受服务后要马上判断是否减少服务窗口（因为能减少成本，银行是积极的）</p></li></ol><p>本问题中假设对公和对外币服务窗口在改为对私服务时及服务期间没有相应因公或外币服务新客户到达（即正好空闲），同时要求以增加成本或影响最小为前提，来尽最大可能减少对私服务客户等待时间。</p><h2 id="输入与输出-4"><a class="markdownIt-Anchor" href="#输入与输出-4"></a> 输入与输出</h2><p>【输入形式】</p><p>首先输入一个整数表示时间周期数，然后再依次输入每个时间周期中因私业务的客户数。注：一个时间周期指的是银行处理一笔业务的平均处理时间，可以是一分钟、三分钟或其它。例如：</p><p>6</p><p>2  5  13  11  15   9</p><p>说明：表明在6个时间周期内，第1个周期来了2个（序号分别为1,2），第2个来了5人（序号分别为3,4,5,6,7），以此类推。</p><p>【输出形式】</p><p>每个客户等待服务的时间周期数。输出形式如下：</p><p>用户序号 : 等待周期数</p><p>说明：客户序号与等待周期数之间用符号:分隔，冒号（:）两边各有一个空格，等待周期数后直接为回车。</p><p>【样例输入】</p><p>4</p><p>2  5  13  11</p><p>【样例输出】</p><p>1 : 0</p><p>2 : 0</p><p>3 : 0</p><p>4 : 0</p><p>5 : 0</p><p>6 : 1</p><p>7 : 1</p><p>8 : 0</p><p>9 : 1</p><p>10 : 1</p><p>11 : 1</p><p>12 : 1</p><p>13 : 2</p><p>14 : 2</p><p>15 : 2</p><p>16 : 3</p><p>17 : 3</p><p>18 : 3</p><p>19 : 4</p><p>20 : 4</p><p>21 : 3</p><p>22 : 4</p><p>23 : 4</p><p>24 : 4</p><p>25 : 5</p><p>26 : 5</p><p>27 : 5</p><p>28 : 6</p><p>29 : 6</p><p>30 : 6</p><p>31 : 7</p><h2 id="样例说明-4"><a class="markdownIt-Anchor" href="#样例说明-4"></a> 样例说明</h2><p>样例输入表明有四个时间周期，第一个周期来了2人（序号1-2）；第二个周期来了5人（序号3-7）；第三个周期来了13人（序号8-20）；第四个周期来了11人（序号21-31）。由于第一个时间周期内只来了2人，银行（有三个服务窗口）能及时提供服务，因此客户等待时间为0；第二个时间周期内来了5人，银行一个周期内一次只能服务3人，另有2个在下个周期内服务，因此等待时间为1，其它类推。</p><h2 id="评分标准-4"><a class="markdownIt-Anchor" href="#评分标准-4"></a> 评分标准</h2><p>通过所有测试点得满分。</p><h2 id="算法分析-5"><a class="markdownIt-Anchor" href="#算法分析-5"></a> 算法分析</h2><p>数据结构使用循环队列</p><h2 id="代码实现-5"><a class="markdownIt-Anchor" href="#代码实现-5"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 200</span></span><br><span class="line"><span class="comment">//客户单元</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cust</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> wtime;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//客户队列(循环队列)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cust</span>  <span class="title">cqueue</span>[<span class="title">MAXSIZE</span>];</span></span><br><span class="line"><span class="comment">//设置队头变量，队尾变量，队伍中元素个数变量</span></span><br><span class="line"><span class="type">int</span> cFront = <span class="number">0</span>, cRear = MAXSIZE - <span class="number">1</span>, cNum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> window = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> cNum == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> cNum == MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//标准的入队函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enQueue</span><span class="params">(<span class="keyword">struct</span> cust c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error for full&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cRear = (cRear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">        cqueue[cRear] = c;</span><br><span class="line">        cNum++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//标准的出队函数</span></span><br><span class="line"><span class="keyword">struct</span> cust <span class="title function_">deQueue</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cust</span> <span class="title">c</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error for empty&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        c = cqueue[cFront];</span><br><span class="line">        cNum--;</span><br><span class="line">        cFront = (cFront + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">service</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cust</span> <span class="title">c</span>;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; window; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = deQueue();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d : %d\n&quot;</span>, c.id, c.wtime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((cNum / window) &lt; <span class="number">7</span> &amp;&amp; window &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        window--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> simulationTime;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;simulationTime);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> clock = <span class="number">1</span>;; clock++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// if等待队列非空，每个客户等待时间++</span></span><br><span class="line">        <span class="keyword">if</span> (!(isEmpty()))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                cqueue[(cFront + i) % MAXSIZE].wtime++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clock &lt;= simulationTime)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//客户进入</span></span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">cust</span> <span class="title">c</span>;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.id = count++;</span><br><span class="line">                c.wtime = <span class="number">0</span>;</span><br><span class="line">                enQueue(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否要增加窗口</span></span><br><span class="line">            <span class="keyword">while</span> ((cNum / window &gt;= <span class="number">7</span>) &amp;&amp; (window &lt; <span class="number">5</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                window++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(service()==<span class="number">0</span>&amp;&amp;clock&gt;simulationTime)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUAA 数据结构第三次作业</title>
      <link href="/2022/03/31/BUAA_3rd_assmt/"/>
      <url>/2022/03/31/BUAA_3rd_assmt/</url>
      
        <content type="html"><![CDATA[<h1 id="连续线段"><a class="markdownIt-Anchor" href="#连续线段"></a> 连续线段</h1><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>平面上两个点（一个点由(x,y)坐标组成）可构成一个线段，两个线段如果有一个端点相同，则可构成一个连续线段。假设构成线段的两个端点为v1(x1,y1)和v2(x2,y2)，在此满足x1&lt;x2，其中v1称为线段的起点，v2为线段的终点。同样，对于连续线段来说，在此满足xi&lt;xi+1（i=1…n-1，n为连续线段中的端点数，xi为相应端点的X轴坐标）。输入一组线段（用两个端点的x、y坐标表示线段，线段个数大于等于2，小于等于100），编程计算出连续线段中包含最多线段数的线段，输出相应的线段数和起点位置（注意，不是最长的连续线段，是包含最多线段的连续线段）。例如：<br /><img src="https://cdn.jsdelivr.net/gh/LITNUTww/picturedemo/img/152144466177607998920.jpg" alt="" /><br />上图中有10个线段，其中5、10、4号线段连成了一条连续线段，线段数3条，起点位置为5号线段的左端点；6、8、2、3、9号线段连成了另一条连续线段，该连续线段包含的线段数最多，为5条，起点位置是6号线段的左端点。<br />注意：<br />1）不考虑线段中间相交的情况；<br />2）不会有三条或三条以上的线段共一个端点；<br />3）只会出现一条包含最多线段的连续线段；</p><h2 id="输入与输出"><a class="markdownIt-Anchor" href="#输入与输出"></a> 输入与输出</h2><p>【输入形式】<br />先从控制台输入线段数，然后从下一行开始分行输入各线段两个端点的x、y坐标，其中第一个端点的X轴坐标小于第二个端点的X轴坐标，即x1&lt;x2，x、y坐标都用整数表示，不会超过int的表示范围。各整数坐标值间以一个空格分隔。<br />【输出形式】<br />先在控制台输出包含最多线段数的连续线段的线段数，然后输出连续线段的起点的x、y坐标，输出数据都以一个空格分隔。<br />【样例输入】<br />10<br />80 75 125 75<br />60 40 80 55<br />80 55 90 20<br />140 120 195 205<br />10 111 70 165<br />22 35 43 43<br />22 175 80 205<br />43 43 60 40<br />90 20 125 60<br />70 165 140 120<br />【样例输出】<br />5 22 35</p><h2 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h2><p>输入了十个线段，第一个线段两个端点分别为(80,75）和(125,75），其它线段类似，如上图所示，这些线段所构成的连续线段中包含最多线段数的连续线段的线段数为5，起点为(22,35），所以输出：5 22 35。</p><h2 id="评分标准"><a class="markdownIt-Anchor" href="#评分标准"></a> 评分标准</h2><p>通过所有测试点将得满分。提交程序名为line.c。</p><h2 id="算法分析"><a class="markdownIt-Anchor" href="#算法分析"></a> 算法分析</h2><p>这道题的难点在于如何选取数据类型和对线段进行排序。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Malloc(type, i) (type *)malloc(sizeof(type) * i)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> x1;</span><br><span class="line">    <span class="type">int</span> y1;</span><br><span class="line">    <span class="type">int</span> x2;</span><br><span class="line">    <span class="type">int</span> y2;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">line</span> <span class="title">line</span>;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    line *x = (line *)a;</span><br><span class="line">    line *y = (line *)b;</span><br><span class="line">    <span class="keyword">return</span> y-&gt;len - x-&gt;len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_1</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    line *x = (line *)a;</span><br><span class="line">    line *y = (line *)b;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;x1 &gt; y-&gt;x1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nums;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nums);</span><br><span class="line">    line *lines;</span><br><span class="line">    lines = Malloc(line, nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;lines[i].x1, &amp;lines[i].y1, &amp;lines[i].x2, &amp;lines[i].y2);</span><br><span class="line">        lines[i].len = <span class="number">1</span>;  <span class="comment">//对于初始的每一条线段它的长度是1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  for (int i = 0; i &lt; nums;i++)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         printf(&quot;%d %d %d %d&quot;, lines[i].x1, lines[i].y1, lines[i].x2, lines[i].y2); */</span></span><br><span class="line">    qsort(lines, nums, <span class="keyword">sizeof</span>(line), cmp_1);   <span class="comment">//这一步排序非常关键，排序按照线段x坐标的大小顺序升序。即后一条线段的x1必须大于前一条线段的x1</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (lines[i].x2 == lines[j].x1 &amp;&amp; lines[i].y2 == lines[j].y1)</span><br><span class="line">            &#123;</span><br><span class="line">                lines[i].x2 = lines[j].x2;</span><br><span class="line">                lines[i].y2 = lines[j].y2;</span><br><span class="line">                lines[i].len += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(lines, nums, <span class="keyword">sizeof</span>(line), cmp); <span class="comment">//按照长度排名排序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, lines[<span class="number">0</span>].len, lines[<span class="number">0</span>].x1, lines[<span class="number">0</span>].y1);</span><br><span class="line">    <span class="comment">/*   for (int i = 0; i &lt; nums;i++)</span></span><br><span class="line"><span class="comment">           printf(&quot;%d %d %d %d %d\n&quot;, lines[i].x1, lines[i].y1, lines[i].x2, lines[i].y2, lines[i].len);</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="猴子选大王"><a class="markdownIt-Anchor" href="#猴子选大王"></a> 猴子选大王</h1><h2 id="问题描述-2"><a class="markdownIt-Anchor" href="#问题描述-2"></a> 问题描述</h2><p>要从n只猴子中选出一位大王。它们决定使用下面的方法：<br />n只猴子围成一圈，从1到n顺序编号。从第q只猴子开始，从1到m报数，凡报到m的猴子退出竞选，下一次又从退出的那只猴子的下一只开始从1到m报数，直至剩下的最后一只为大王。请问最后哪只猴子被选为大王。</p><h2 id="输入与输出-2"><a class="markdownIt-Anchor" href="#输入与输出-2"></a> 输入与输出</h2><p>【输入形式】<br />控制台输入三个整数n，m，q，各整数间以一个空格分隔。<br />【输出形式】<br />输出最后选为大王的猴子编号。<br />【样例输入】<br />7  4  3<br />【样例输出】<br />4</p><h2 id="样例说明-2"><a class="markdownIt-Anchor" href="#样例说明-2"></a> 样例说明</h2><p>输入有7只猴子，从第3只猴子开始，从1到4报数。最后编号为4的猴子被选为大王。</p><h2 id="评分标准-2"><a class="markdownIt-Anchor" href="#评分标准-2"></a> 评分标准</h2><p>本题要求输出最后被选为大王的猴子编号，完全正确得20分，每个测试点4分。上传C语言文件名为monkey.c</p><h2 id="算法分析-2"><a class="markdownIt-Anchor" href="#算法分析-2"></a> 算法分析</h2><p>约瑟夫问题，使用循环链表实现</p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Malloc(type, n) (type *)malloc(sizeof(type *) * n)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">monkey</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">monkey</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">monkey</span> <span class="title">M</span>;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    M *<span class="built_in">list</span> = <span class="literal">NULL</span>, *p, *r;</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="comment">//构建环形链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  <span class="comment">//建立循环链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = Malloc(M, <span class="number">1</span>);</span><br><span class="line">        p-&gt;num = i;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">list</span> = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;link = p;</span><br><span class="line">        &#125;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;link = <span class="built_in">list</span>;</span><br><span class="line">    p = <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r = p;           <span class="comment">//r结点是p的直接前驱节点  这条语句的作用是当m=1时后面的删除操作仍能正确进行</span></span><br><span class="line">        p = p-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;link != p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            r = p;       <span class="comment">//r结点是p的直接前驱节点</span></span><br><span class="line">            p = p-&gt;link;</span><br><span class="line">        &#125;</span><br><span class="line">        r-&gt;link = p-&gt;link;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = r-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多项式相乘"><a class="markdownIt-Anchor" href="#多项式相乘"></a> 多项式相乘</h1><h2 id="问题描述-3"><a class="markdownIt-Anchor" href="#问题描述-3"></a> 问题描述</h2><p>编写一个程序实现两个一元多项式相乘。</p><h2 id="输入与输出-3"><a class="markdownIt-Anchor" href="#输入与输出-3"></a> 输入与输出</h2><p>【输入形式】</p><p>首先输入第一个多项式中系数不为0的项的系数和指数，以一个空格分隔。且该多项式中各项的指数均为0或正整数，系数和最高幂次不会超过int类型的表示范围。对于多项式 anxn +a n-1 x n-1 +…+ a1x1 + a0x0 的输入方法如下：<br />an  n  a n-1  n-1 …  a1  1  a0  0<br />即相邻两个整数分别表示表达式中一项的系数和指数。在输入中只出现系数不为0的项。最后一项的指数后没有空格，只有一个回车换行符。<br />按照上述方式再输入第二个多项式。</p><p>【输出形式】</p><p>将运算结果输出到屏幕。将系数不为0的项按指数从高到低的顺序输出，每次输出其系数和指数，均以一个空格分隔，最后一项的指数后也可以有一个空格。</p><p>【样例输入】</p><p>10 80000 2 6000 7 300 5 10 18 0<br />3 6000 5 20 8 10 6 0</p><p>【样例输出】</p><p>30 86000 50 80020 80 80010 60 80000 6 12000 21 6300 10 6020 31 6010 66 6000 35 320 56 310 42 300 25 30 130 20 174 10 108 0</p><h2 id="样例说明-3"><a class="markdownIt-Anchor" href="#样例说明-3"></a> 样例说明</h2><p>输入的两行分别代表如下表达式：<br />10x80000 + 2x6000 + 7x300 + 5x10 + 18<br />3x6000 + 5x20 + 8x10 + 6<br />相乘结果为：<br />30x86000 + 50x80020 + 80x80010 + 60x80000 + 6x12000 + 21x6300 + 10x6020 + 31x6010 + 66x6000 + 35x320 + 56x310 + 42x300 + 25x30 + 130x20 + 174x10 + 108</p><p>提示：利用链表存储多项式的系数和指数。</p><h2 id="评分标准-3"><a class="markdownIt-Anchor" href="#评分标准-3"></a> 评分标准</h2><p>该题要求输出相乘后多项式中系数不为0的系数和指数，共有5个测试点。上传C语言文件名为multi.c。</p><h2 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Malloc(type, n) (type *)malloc(sizeof(type *) * n)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> xishu;</span><br><span class="line">    <span class="type">int</span> zhishu;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> <span class="title">L</span>;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    L *list1 = <span class="literal">NULL</span>, *list2 = <span class="literal">NULL</span>, *p, *r, *q, *p1;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="comment">//生成两个链表来存储两个多项式</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%c&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        p = Malloc(L, <span class="number">1</span>);</span><br><span class="line">        p-&gt;xishu = a;</span><br><span class="line">        p-&gt;zhishu = b;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            list1 = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;link = p;</span><br><span class="line">        &#125;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125; <span class="keyword">while</span> (c != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%c&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="comment">//将第二个多项式中的一项分别与第一个多项式中的每一项相乘</span></span><br><span class="line">        <span class="keyword">for</span> (p = list1; p != <span class="literal">NULL</span>; p = p-&gt;link)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a1, b1;</span><br><span class="line">            a1 = a * p-&gt;xishu;</span><br><span class="line">            b1 = b + p-&gt;zhishu;</span><br><span class="line">            <span class="comment">//生成新的链结点用来存放乘算好的新系数和新指数</span></span><br><span class="line">            q = Malloc(L, <span class="number">1</span>);</span><br><span class="line">            q-&gt;xishu = a1;</span><br><span class="line">            q-&gt;zhishu = b1;</span><br><span class="line">            q-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">//生成第三个链表</span></span><br><span class="line">            <span class="keyword">if</span> (list2 == <span class="literal">NULL</span>) <span class="comment">//如果新链表是空的</span></span><br><span class="line">            &#123;</span><br><span class="line">                list2 = q;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//如果新链表不是空的，则需要判断当前项和新链表中每一项指数的大小关系。</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//遍历新链表</span></span><br><span class="line">                <span class="keyword">for</span> (p1 = list2; p1 != <span class="literal">NULL</span>; r = p1, p1 = p1-&gt;link)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p1-&gt;zhishu &lt; q-&gt;zhishu)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (p1 == list2)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//插入到头结点的前面</span></span><br><span class="line">                            q-&gt;link = p1;</span><br><span class="line">                            list2 = q;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//插入到p1结点的前面</span></span><br><span class="line">                            q-&gt;link = p1;</span><br><span class="line">                            r-&gt;link = q;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (p1-&gt;zhishu == q-&gt;zhishu) <span class="comment">//如果p1和q的指数相等</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        p1-&gt;xishu += q-&gt;xishu;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p1 == <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//放在尾节点节点的后面</span></span><br><span class="line">                    r-&gt;link = q;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (c != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (L *l = list2; l != <span class="literal">NULL</span>; l = l-&gt;link)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d &quot;</span>, l-&gt;xishu, l-&gt;zhishu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件加密环"><a class="markdownIt-Anchor" href="#文件加密环"></a> 文件加密（环）</h1><h2 id="问题描述建议用链表实现"><a class="markdownIt-Anchor" href="#问题描述建议用链表实现"></a> 问题描述（建议用链表实现）</h2><p>有一种文本文件加密方法，其方法如下：</p><p>1、密钥由所有ASCII码可见字符（ASCII码编码值32-126为可见字符）组成，密钥长度不超过32个字符；</p><p>2、先将密钥中的重复字符去掉，即：只保留最先出现的字符，其后出现的相同字符都去掉；</p><p>3、将不含重复字符的密钥和其它不在密钥中的可见字符（按字符升序）连成一个由可见字符组成的环，密钥在前，密钥的头字符为环的起始位置；</p><p>4、设原密钥的第一个字符（即环的起始位置）作为环的开始位置标识，先从环中删除第一个字符（位置标识则移至下一个字符），再沿着环从下一个字符开始顺时针以第一个字符的ASCII码值移动该位置标识至某个字符，则该字符成为第一个字符的密文字符；然后从环中删除该字符，再从下一个字符开始顺时针以该字符的ASCII码值移动位置标识至某个字符，找到该字符的密文字符；依次按照同样方法找到其它字符的密文字符。当环中只剩一个字符时，则该剩下的最后一个字符的密文为原密钥的第一个字符。</p><p>下面以可见字符集只由小写字母组成为例来说明对应密文字符集生成过程。如果密钥为：helloworld，将密钥中重复字符去掉后为：helowrd，将不在密钥中的小写字母按照升序添加在密钥后，即形成字符串：helowrdabcfgijkmnpqstuvxyz，该字符串形成的环如下图所示：<br /><img src="https://cdn.jsdelivr.net/gh/LITNUTww/picturedemo/img/14728124790320106102715.jpg" alt="" /><br />上方为原文字符，下方为对应的密文字符。由所有ASCII可见字符集组成的字符集密文字符生成方式与上例相同。</p><p>编写程序实现上述文件加密方法。密钥从标准输入读取，待加密文件为当前目录下的in.txt文件，该文件中的字符若是可见字符，则按照上述方法进行加密，否则原样输出（例如：回车换行符），加密后生成的密文文件为当前目录下的in_crpyt.txt。</p><h2 id="输入与输出-4"><a class="markdownIt-Anchor" href="#输入与输出-4"></a> 输入与输出</h2><p>【输入形式】</p><p>密钥是从标准输入读取的一行字符串，可以包含任意ASCII码可见字符（ASCII码编码值32-126为可见字符），长度不超过32个字符。</p><p>【输出形式】</p><p>加密后生成的密文文件为当前目录下的in_crpyt.txt。</p><p>【样例输入】</p><p>C Programming(Second Edition)</p><p>假设in.txt文件内容为：</p><p>This book is meant to help the reader learn how to program in C. It is the definitive reference guide, now in a second edition. Although the first edition was written in 1978, it continues to be a worldwide best-seller. This second edition brings the classic original up to date to include the ANSI standard.</p><p>From the Preface:</p><p>【样例输出】</p><p>in_crpyt.txt文件内容为：</p><p>KgklW#33&gt;WklWA^M8W83Wg\Z,W8g\WP^u\PWZ^PMWg3jW83W,P30P<sup>AWkMWX5W.8WklW8g\Wu\EkMk8kt\WP\E\P\MR\W0-ku+WM3jWkMW</sup>Wl\R3MuW\uk8k3M5WIZ8g3-0gW8g\WEkPl8W\uk8k3MWj<sup>lWjPk88\MWkMW’71G+Wk8WR3M8kM-\lW83W#\W</sup>Wj3PZujku\W#\l8Jl\ZZ\P5WKgklWl\R3MuW\uk8k3MW#PkM0lW8g\WRZ<sup>llkRW3Pk0kM</sup>ZW-,W83Wu<sup>8\W83WkMRZ-u\W8g\WIOY.Wl8</sup>Mu^Pu5</p><p>4P3AW8g\WdP\E^R(</p><h2 id="样例说明-4"><a class="markdownIt-Anchor" href="#样例说明-4"></a> 样例说明</h2><p>输入的密钥为C Programming(Second Edition)，由该密钥生成的字符串环中字符依次为：</p><p>C Progamin(SecdEt)!&quot;#$%&amp;’*+,-./0123456789:;&lt;=&gt;?@ABDFGHIJKLMNOQRTUVWXYZ[]^_`bfhjklpqsuvwxyz{|}~</p><p>形成的字符转换字符表（第一行为原ASCII字符，第二行为对应的密文字符）为：<br /><img src="https://cdn.jsdelivr.net/gh/LITNUTww/picturedemo/img/1523263153403081118.png" alt="" /><br />按照该密文转换字符表将in.txt中的内容转换成加密字符输出到in_crpyt.txt中。</p><h2 id="评分标准-4"><a class="markdownIt-Anchor" href="#评分标准-4"></a> 评分标准</h2><p>该题要求对指定的文件进行加密，提交的文件名为：encode.c。</p><h2 id="问题总结"><a class="markdownIt-Anchor" href="#问题总结"></a> 问题总结</h2><p>这道题本身真的简单，模拟题目的要求即可，但是debug了很长时间。<br />问题1：<code>fopen</code>的使用不熟练，相应的文件要建在和源文件同一个文件夹下。<br />问题2：也是最严重的问题，<code>(type *)malloc(sizeof(type) * n)</code>参数不是指针的大小<code>sizeof((type*) * n)</code>若是这样写会<code>return 3221225477</code>(非法内存访问)<br />问题3：<code>for</code>中的参数要仔细考虑，尤其是涉及字符串长度时不能理所当然的写<code>i&lt;strlen(str)</code></p><h2 id="代码实现-4"><a class="markdownIt-Anchor" href="#代码实现-4"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Malloc(type, n) (type *)malloc(sizeof(type) * n)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ring</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ring</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ring</span> <span class="title">R</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hash[<span class="number">128</span>];</span><br><span class="line"><span class="type">char</span> key[<span class="number">50</span>], key_pro[<span class="number">200</span>];</span><br><span class="line"><span class="type">char</span> match[<span class="number">2</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    R *ring = <span class="literal">NULL</span>, *p, *r;</span><br><span class="line">    <span class="type">char</span> zifu;</span><br><span class="line">    <span class="type">char</span> str_ori[<span class="number">10000</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    gets(key);</span><br><span class="line">    <span class="comment">// 打表获得除去重复字符后的字符串key_pro</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(key); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[key[i] - <span class="string">&#x27; &#x27;</span>] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            key_pro[j++] = key[i];</span><br><span class="line">            hash[key[i] - <span class="string">&#x27; &#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(key_pro);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">94</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            key_pro[len++] = i + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//形成加密环</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(key_pro); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = Malloc(R, <span class="number">1</span>);</span><br><span class="line">        p-&gt;ch = key_pro[i];</span><br><span class="line">        <span class="keyword">if</span> (ring == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ring = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;link = p;</span><br><span class="line">        &#125;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;link = ring;</span><br><span class="line"></span><br><span class="line">    R *p0 = ring;</span><br><span class="line">    R *p1 = p0; <span class="comment">// p1是当前结点</span></span><br><span class="line">    R *p2 = p;  <span class="comment">// p2是当前节点的前置结点</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ASCII;</span><br><span class="line">        ASCII = (<span class="type">int</span>)p1-&gt;ch;</span><br><span class="line">        <span class="comment">// 删除当前节点</span></span><br><span class="line">        p2-&gt;link = p1-&gt;link;</span><br><span class="line">        <span class="comment">// free(p1);</span></span><br><span class="line">        p1 = p2-&gt;link;</span><br><span class="line">        <span class="comment">//跑圈</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ASCII - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            p1 = p1-&gt;link;</span><br><span class="line">            p2 = p2-&gt;link;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成转换表；</span></span><br><span class="line">        match[<span class="number">0</span>][ASCII] = (<span class="type">char</span>)ASCII;</span><br><span class="line">        match[<span class="number">1</span>][ASCII] = p1-&gt;ch;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p1-&gt;link != p1);</span><br><span class="line">    <span class="comment">//剩下最后的一个字符</span></span><br><span class="line">    match[<span class="number">0</span>][(<span class="type">int</span>)p1-&gt;ch] = p1-&gt;ch;</span><br><span class="line">    match[<span class="number">1</span>][(<span class="type">int</span>)p1-&gt;ch] = p0-&gt;ch;</span><br><span class="line"></span><br><span class="line">    FILE *fp, *gp;</span><br><span class="line">    fp = fopen(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    gp = fopen(<span class="string">&quot;in_crpyt.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="comment">// if (fp == NULL || gp == NULL)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;file cannot open&quot;);</span></span><br><span class="line">    <span class="comment">//     return 404;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        zifu = fgetc(fp);</span><br><span class="line">        str_ori[i++] = zifu;</span><br><span class="line">    &#125; <span class="keyword">while</span> (zifu != EOF);</span><br><span class="line">    k = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="type">int</span>)str_ori[i] &lt; <span class="number">32</span> || (<span class="type">int</span>)str_ori[i] &gt; <span class="number">126</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fputc(str_ori[i], gp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">32</span>; j &lt;= <span class="number">126</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (match[<span class="number">0</span>][j] == str_ori[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    fputc(match[<span class="number">1</span>][j], gp);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    fclose(gp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="词频统计数组或链表实现"><a class="markdownIt-Anchor" href="#词频统计数组或链表实现"></a> 词频统计（数组或链表实现）</h1><h2 id="问题描述-4"><a class="markdownIt-Anchor" href="#问题描述-4"></a> 问题描述</h2><p>编写程序统计一个英文文本文件中每个单词的出现次数（词频统计），并将统计结果按单词字典序输出到屏幕上。<br />注：在此单词为仅由字母组成的字符序列。包含大写字母的单词应将大写字母转换为小写字母后统计。</p><h2 id="输入与输出-5"><a class="markdownIt-Anchor" href="#输入与输出-5"></a> 输入与输出</h2><p>【输入形式】<br />打开当前目录下文件“article.txt”，从中读取英文单词进行词频统计。</p><p>【输出形式】<br />程序将单词统计结果按单词字典序输出到屏幕上，每行输出一个单词及其出现次数，单词和其出现次数间由一个空格分隔，出现次数后无空格，直接为回车。</p><p>【样例输入】<br />当前目录下文件article.txt内容如下：<br />“Do not take to heart every thing you hear.”<br />“Do not spend all that you have.”<br />“Do not sleep as long as you want;”</p><p>【样例输出】<br />all 1<br />as 2<br />do 3<br />every 1<br />have 1<br />hear 1<br />heart 1<br />long 1<br />not 3<br />sleep 1<br />spend 1<br />take 1<br />that 1<br />thing 1<br />to 1<br />want 1<br />you 3</p><h2 id="样例说明-5"><a class="markdownIt-Anchor" href="#样例说明-5"></a> 样例说明</h2><p>按单词字典序依次输出单词及其出现次数。</p><h2 id="评分标准-5"><a class="markdownIt-Anchor" href="#评分标准-5"></a> 评分标准</h2><p>通过所有测试点将得满分。</p><h2 id="代码实现-5"><a class="markdownIt-Anchor" href="#代码实现-5"></a> 代码实现</h2><p>数组版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Malloc(type, n) (type *)malloc(sizeof(type) * n)</span></span><br><span class="line"><span class="comment">// struct Node</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int num;</span></span><br><span class="line"><span class="comment">//     char word[30];</span></span><br><span class="line"><span class="comment">//     struct Node *link;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// typedef struct Node N;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">word</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> ch[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> nums;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">word</span> <span class="title">W</span>;</span></span><br><span class="line"><span class="type">char</span> words[<span class="number">1000</span>][<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    W *x = (W *)a;</span><br><span class="line">    W *y = (W *)b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(x-&gt;ch, y-&gt;ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp, *gp;</span><br><span class="line">    fp = fopen(<span class="string">&quot;article.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="comment">// N *list;</span></span><br><span class="line">    W words[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = fgetc(fp)) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalpha</span>(c))</span><br><span class="line">        &#123;</span><br><span class="line">            c = <span class="built_in">tolower</span>(c);</span><br><span class="line">            words[i].ch[j++] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">isalpha</span>(c))</span><br><span class="line">        &#123;</span><br><span class="line">            words[i].nums = <span class="number">1</span>;</span><br><span class="line">            words[i++].ch[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = i;</span><br><span class="line">    qsort(words, i, <span class="keyword">sizeof</span>(W), cmp);</span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; len;i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;%s&quot;, words[i].ch);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (words[i].ch[<span class="number">0</span>] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(words[i].ch, words[j].ch) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                words[i].nums++;</span><br><span class="line">                words[j].ch[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (words[i].ch[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, words[i].ch, words[i].nums);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUAA 数据结构第二次作业</title>
      <link href="/2022/03/21/BUAA_2nd_assmt/"/>
      <url>/2022/03/21/BUAA_2nd_assmt/</url>
      
        <content type="html"><![CDATA[<h1 id="五子棋危险判断"><a class="markdownIt-Anchor" href="#五子棋危险判断"></a> 五子棋危险判断</h1><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>已知两人分别执白棋和黑棋在一个围棋棋盘上下五子棋，若同一颜色的棋子在同一条横行、纵行或斜线上连成5个棋子，则执该颜色棋子的人获胜。编写程序读入某一时刻下棋的状态，并判断是否有人即将获胜，即：同一颜色的棋子在同一条横行、纵列或斜线上连成4个棋子，且该4个棋子的两端至少有一端为空位置。<br />输入的棋盘大小是19×19，用数字0表示空位置（即没有棋子），用数字1表示该位置下了一白色棋子，用数字2表示该位置下了一黑色棋子。假设同一颜色的棋子在同一条横行、纵列或斜线上连成的棋子个数不会超过4个，并且最多有一人连成线的棋子个数为4。</p><h2 id="输入与输出"><a class="markdownIt-Anchor" href="#输入与输出"></a> 输入与输出</h2><p>【输入形式】<br />从控制台输入用来表示棋盘状态的数字0、1或2；每行输入19个数字，各数字之间以一个空格分隔，每行最后一个数字后没有空格；共输入19行表示棋盘状态的数字。</p><p>【输出形式】<br />若有人即将获胜，则先输出即将获胜人的棋子颜色（1表示白色棋子，2表示黑色棋子），然后输出英文冒号:，最后输出连成4个棋子连线的起始位置（棋盘横行自上往下、纵列自左往右从1开始计数，横行最小的棋子在棋盘上的横行数和纵列数作为连线的起始位置，若在同一行上，则纵列数最小的棋子位置作为起始位置，两数字之间以一个英文逗号,作为分隔符）。<br />若没有人获胜，则输出英文字符串：No。<br />无论输出什么结果，最后都要有回车换行符。</p><p>【输入样例1】<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 2 0 1 1 2 0 0 0 0 0 0 0<br />0 0 0 0 0 2 1 1 1 1 2 2 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 1 2 1 2 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 1 1 0 2 2 0 0 0 0 0 0 0 0<br />0 0 0 0 0 2 0 1 0 0 2 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</p><p>【输出样例1】<br />1:9,8</p><p>【输入样例2】<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 1 2 2 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</p><p>【输出样例2】<br />No</p><h2 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h2><p>在输入的样例1中，执白棋（数字1表示）的人即将获胜，连成4个棋子且有一端为空的起始位置在第9行第8列，所以输出1:9,8。<br />在输入的样例2中，还没有同一颜色的棋子连成4个，所以无人即将获胜，直接输出No。</p><h2 id="评分标准"><a class="markdownIt-Anchor" href="#评分标准"></a> 评分标准</h2><p>该题要求判断五子棋的棋盘状态，提交程序文件名为chess.c。</p><h2 id="算法分析"><a class="markdownIt-Anchor" href="#算法分析"></a> 算法分析</h2><p>五子棋能赢只有四种情况，即水平方向，垂直方向，左上到右下，右上到左下。循环起始条件是当前位置不是0（即有棋子），分别判断该棋子和它相应四个方向上的后三个棋子是否相同，当判断到第三个时，附加条件判断该四个棋子两边是否是0（即空位置）</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> chessBoard[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化棋盘格 首先全部置3，然后将能下棋的部分，即19*19的范围内进行输入，全部置3的目的是形成期盼的边缘，防止数组越界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">40</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            chessBoard[i][j] = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;chessBoard[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断垂直方向是否获胜</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (chessBoard[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((chessBoard[i + k][j] == chessBoard[i][j]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (k == <span class="number">3</span> &amp;&amp; (chessBoard[i - <span class="number">1</span>][j] == <span class="number">0</span> || chessBoard[i + <span class="number">4</span>][<span class="number">4</span>] == <span class="number">0</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;%d:%d,%d\n&quot;</span>, chessBoard[i][j], i, j);</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断水平方向是否获胜</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (chessBoard[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((chessBoard[i][j + k] == chessBoard[i][j]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (k == <span class="number">3</span> &amp;&amp; (chessBoard[i][j - <span class="number">1</span>] == <span class="number">0</span> || chessBoard[i][j + <span class="number">4</span>] == <span class="number">0</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;%d:%d,%d\n&quot;</span>, chessBoard[i][j], i, j);</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//判断从左上到右下方向是否获胜</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (chessBoard[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((chessBoard[i + k][j + k] == chessBoard[i][j]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (k == <span class="number">3</span> &amp;&amp; (chessBoard[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">0</span> || chessBoard[i + <span class="number">4</span>][j + <span class="number">4</span>] == <span class="number">0</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;%d:%d,%d\n&quot;</span>, chessBoard[i][j], i, j);</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断从右上到左下是否获胜</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (chessBoard[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((chessBoard[i + k][j - k] == chessBoard[i][j]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (k == <span class="number">3</span> &amp;&amp; (chessBoard[i - <span class="number">1</span>][j + <span class="number">1</span>] == <span class="number">0</span> || chessBoard[i + <span class="number">4</span>][j - <span class="number">4</span>] == <span class="number">0</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;%d:%d,%d\n&quot;</span>, chessBoard[i][j], i, j);</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串替换新"><a class="markdownIt-Anchor" href="#字符串替换新"></a> 字符串替换（新）</h1><h2 id="问题描述-2"><a class="markdownIt-Anchor" href="#问题描述-2"></a> 问题描述</h2><p>编写程序将一个指定文件中某一字符串替换为另一个字符串。要求：（1）被替换字符串若有多个，均要被替换；（2）指定的被替换字符串，大小写无关。</p><h2 id="输入与输出-2"><a class="markdownIt-Anchor" href="#输入与输出-2"></a> 输入与输出</h2><p>【输入形式】</p><p>给定文件名为filein.txt。从控制台输入两行字符串（不含空格，行末尾都有回车换行符），分别表示被替换的字符串和替换字符串。</p><p>【输出形式】</p><p>将替换后的结果输出到文件fileout.txt中。</p><p>【样例输入】</p><p>从控制台输入两行字符串：</p><p>in</p><p>out</p><p>文件filein.txt的内容为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE * IN;</span><br><span class="line">    <span class="keyword">if</span>((IN=fopen(<span class="string">&quot;in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;Can&amp;rsquo;t open in.txt!&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(IN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【样例输出】</p><p>文件fileout.txt的内容应为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#outclude <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">maout</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE * out;</span><br><span class="line">    <span class="keyword">if</span>((out=fopen(<span class="string">&quot;out.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       prouttf(<span class="string">&quot;Can&amp;rsquo;t open out.txt!&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="样例说明-2"><a class="markdownIt-Anchor" href="#样例说明-2"></a> 样例说明</h2><p>输入的被替换字符串为in，替换字符串为out，即将文件filein.txt中的所有in字符串（包括iN、In、IN字符串）全部替换为out字符串，并输出保存到文件fileout.txt中。</p><h2 id="评分标准-2"><a class="markdownIt-Anchor" href="#评分标准-2"></a> 评分标准</h2><p>该题要求得到替换后的文件内容，共有5个测试点。上传C语言文件名为replace.c</p><h2 id="算法分析-2"><a class="markdownIt-Anchor" href="#算法分析-2"></a> 算法分析</h2><p>该题是简单的字符串替换，考察文件的读写。</p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp, *gp;</span><br><span class="line">    fp = fopen(<span class="string">&quot;filein.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    gp = fopen(<span class="string">&quot;fileout.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="type">char</span> in[<span class="number">20</span>], out[<span class="number">20</span>], str[<span class="number">2000</span>], ch;</span><br><span class="line">    <span class="type">int</span> len_in, len_out, len_str, flag = <span class="number">0</span>;</span><br><span class="line">    gets(in);</span><br><span class="line">    gets(out);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch = fgetc(fp);</span><br><span class="line">        str[i++] = ch;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ch != EOF); <span class="comment">//读取文件中的字符，存储在str中</span></span><br><span class="line">    len_in = <span class="built_in">strlen</span>(in);</span><br><span class="line">    len_out = <span class="built_in">strlen</span>(out);</span><br><span class="line">    len_str = i - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// len_str = strlen(str);//计算三者的长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len_str; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;                              <span class="comment">//遍历文件中的每一个字符</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">toupper</span>(str[i]) == <span class="built_in">toupper</span>(in[<span class="number">0</span>])) <span class="comment">//寻找文件中被替换的字符</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; len_in; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">toupper</span>(in[j]) != <span class="built_in">toupper</span>(str[i + j])) <span class="comment">//找到了，接下来看是否真的存在，如果没有</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="comment">//如果不相等</span></span><br><span class="line">            &#123;</span><br><span class="line">                fputc(str[i], gp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//如果找到相等的了,就进行替换输出</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len_out; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    fputc(out[k], gp);</span><br><span class="line">                &#125;</span><br><span class="line">                i += len_in - <span class="number">1</span>; <span class="comment">//关键的一步</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            fputc(str[i], gp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    fclose(gp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加密文件"><a class="markdownIt-Anchor" href="#加密文件"></a> 加密文件</h1><h2 id="问题描述-3"><a class="markdownIt-Anchor" href="#问题描述-3"></a> 问题描述</h2><p>有一种加密方法为：其使用一个字母串（可以含重复字母，字母个数不超过50）作为密钥。假定密钥单词串为feather，则先去掉密钥单词中的重复字母得到单词串feathr，然后再将字母表中的其它字母以反序追加到feathr的后面：</p><p>f e a t h r z y x w v u s q p o n m l k j i g d c b<br />加密字母的对应关系如下：</p><p>a b c d e f g h i j k l m n o p q r s t u v w x y z<br />f e a t h r z y x w v u s q p o n m l k j i g d c b<br />其中第一行为原始英文字母，第二行为对应加密字母。其它字符不进行加密。编写一个程序，用这种密码加密文件。假定要加密的文件名为encrypt.txt及加密后的文件名为output.txt，并假定输入文件中字母全为小写字母，并且输入密钥也全为小写字母。</p><h2 id="输入与输出-3"><a class="markdownIt-Anchor" href="#输入与输出-3"></a> 输入与输出</h2><p>【输入形式】从标准输入中输入密钥串，并从文件encrypt.txt中读入要加密的内容。<br />【输出形式】加密后结果输出到文件output.txt中。<br />【样例输入】<br />feather<br />和文件encrypt.txt中内容，例如被加密的文件encrypt.txt中内容为：<br />c language is wonderful.<br />【样例输出】加密后output.txt文件中内容为：<br />a ufqzjfzh xl gpqthmrju.</p><h2 id="样例说明-3"><a class="markdownIt-Anchor" href="#样例说明-3"></a> 样例说明</h2><p>首先将给定的密钥单词去除重复字母，然后按照上面的加密对应表对encrypt.txt文件内容进行加密即可得到加密后的文件，其中只对英文字母进行加密对换，并且假设encrypt.txt中的英文字母全是小写字母。</p><h2 id="评分标准-3"><a class="markdownIt-Anchor" href="#评分标准-3"></a> 评分标准</h2><p>该题要求对文件进行加密，共有5个测试点。提交程序名为encrypt.c</p><h2 id="算法分析-3"><a class="markdownIt-Anchor" href="#算法分析-3"></a> 算法分析</h2><p>该题是一道简单的加密类型题，这里利用哈希表的原理，设一个数组box，分别用0-25来映射a-z。再设一个数组，二维数组match，第一行放a-z即原始字母，第二行放加密字母。</p><h2 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> box[<span class="number">30</span>];</span><br><span class="line"><span class="type">char</span> alphab[<span class="number">30</span>] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"><span class="type">char</span> match[<span class="number">2</span>][<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp, *gp;</span><br><span class="line">    <span class="type">char</span> key[<span class="number">100</span>], ch, str[<span class="number">1000</span>], str_ori[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    gets(key);</span><br><span class="line">    fp = fopen(<span class="string">&quot;encrypt.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    gp = fopen(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch = fgetc(fp);</span><br><span class="line">        str_ori[i++] = ch;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ch != EOF);</span><br><span class="line">    len = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = j = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(key); i++)<span class="comment">//遍历key中的字符，box置1代表字母出现过了。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (box[key[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            box[key[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">            match[<span class="number">1</span>][j++] = key[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">25</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//逆序地把没有出现过的字母放到match中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (box[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            match[<span class="number">1</span>][j++] = i + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        match[<span class="number">0</span>][i] = alphab[i];  <span class="comment">//放置原始字母</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">islower</span>(str_ori[i])))   <span class="comment">//如果是空格就按原样输出</span></span><br><span class="line">        &#123;</span><br><span class="line">            fputc(str_ori[i], gp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                          <span class="comment">//否则遍历match寻找对应的加密字母输出</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str_ori[i] == match[<span class="number">0</span>][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// printf(&quot;%c&quot;, match[1][j]);</span></span><br><span class="line">                    fputc(match[<span class="number">1</span>][j], gp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    fclose(gp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通讯录整理"><a class="markdownIt-Anchor" href="#通讯录整理"></a> 通讯录整理</h1><h2 id="问题描述-4"><a class="markdownIt-Anchor" href="#问题描述-4"></a> 问题描述</h2><p>读取一组电话号码簿（由姓名和手机号码组成），将重复出现的项删除（$\color{Red} {姓名和电话号码都相同} <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">的</mi><mi mathvariant="normal">项</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">复</mi><mi mathvariant="normal">项</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">只</mi></mrow><annotation encoding="application/x-tex">的项为重复项，只</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">复</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">只</span></span></span></span>\color{Red} {保留第一次出现的} <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">项</mi><mi mathvariant="normal">）</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">并</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">姓</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">相</mi><mi mathvariant="normal">同</mi><mi mathvariant="normal">手</mi><mi mathvariant="normal">机</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">码</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">同</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">项</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">整</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">首</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">出</mi><mi mathvariant="normal">现</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">项</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">作</mi><mi mathvariant="normal">处</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">第</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">复</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">姓</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">加</mi></mrow><annotation encoding="application/x-tex">项），并对姓名相同手机号码不同的项进行如下整理：首次出现的项不作处理，第一次重复的姓名后面加</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">姓</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">手</span><span class="mord cjk_fallback">机</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">首</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">现</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">处</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">复</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">姓</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">加</span></span></span></span>\color{Red} {英文下划线字符和数字1} <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">，</mi><mi mathvariant="normal">第</mi><mi mathvariant="normal">二</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">复</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">姓</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">英</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">划</mi><mi mathvariant="normal">线</mi><mi mathvariant="normal">字</mi><msub><mi mathvariant="normal">符</mi><mi mathvariant="normal">和</mi></msub><mi mathvariant="normal">数</mi><mi mathvariant="normal">字</mi><mn>2</mn><mi mathvariant="normal">，</mi><mi mathvariant="normal">依</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">类</mi><mi mathvariant="normal">推</mi><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">，第二次重复的姓名后面加英文下划线字符_和数字2，依次类推。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">二</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">复</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">姓</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">英</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">划</span><span class="mord cjk_fallback">线</span><span class="mord cjk_fallback">字</span><span class="mord"><span class="mord cjk_fallback">符</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">和</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">字</span><span class="mord">2</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">推</span><span class="mord cjk_fallback">。</span></span></span></span>\color{Red} {号码簿中姓名相同的项数最多不超过10个} <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">。</mi><mi mathvariant="normal">最</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">整</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">电</mi><mi mathvariant="normal">话</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">码</mi><mi mathvariant="normal">簿</mi><mi mathvariant="normal">按</mi><mi mathvariant="normal">照</mi><mi mathvariant="normal">姓</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">行</mi></mrow><annotation encoding="application/x-tex">。最后对整理后的电话号码簿按照姓名进行</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">话</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">簿</span><span class="mord cjk_fallback">按</span><span class="mord cjk_fallback">照</span><span class="mord cjk_fallback">姓</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span></span></span></span>\color{Red} {从小到大排序} $，并输出排序后的电话号码簿。</p><h2 id="输入与输出-4"><a class="markdownIt-Anchor" href="#输入与输出-4"></a> 输入与输出</h2><p>【输入形式】<br />先从标准输入读取电话号码个数，然后分行输入姓名和电话号码，姓名由不超过20个英文小写字母组成，电话号码由11位数字字符组成，姓名和电话号码之间以一个空格分隔，输入的姓名和电话号码项不超过100个。</p><p>【输出形式】<br />按照姓名从小到大的顺序分行输出最终的排序结果，先输出姓名再输出电话号码，以一个空格分隔。</p><p>【样例输入】<br />15</p><p>liping 13512345678</p><p>zhaohong 13838929457</p><p>qiansan 13900223399</p><p>zhouhao 18578294857</p><p>anhai 13573948758</p><p>liping 13512345678</p><p>zhaohong 13588339922</p><p>liping 13833220099</p><p>boliang 15033778877</p><p>zhaohong 13838922222</p><p>tianyang 18987283746</p><p>sunnan 13599882764</p><p>zhaohong 13099228475</p><p>liushifeng 13874763899</p><p>caibiao 13923567890</p><p>【样例输出】<br />anhai 13573948758</p><p>boliang 15033778877</p><p>caibiao 13923567890</p><p>liping 13512345678</p><p>liping_1 13833220099</p><p>liushifeng 13874763899</p><p>qiansan 13900223399</p><p>sunnan 13599882764</p><p>tianyang 18987283746</p><p>zhaohong 13838929457</p><p>zhaohong_1 13588339922</p><p>zhaohong_2 13838922222</p><p>zhaohong_3 13099228475</p><p>zhouhao 18578294857</p><h2 id="样例说明-4"><a class="markdownIt-Anchor" href="#样例说明-4"></a> 样例说明</h2><p>输入了15个人名和电话号码。其中第一项和第六项完全相同，都是“liping 13512345678”，将第六项删除，第一项保留；</p><p>第八项和第一项人名相同，电话不同，则将第八项的人民整理为liping_1；同样，第二项、第七项、第十项、第十三项的人名都相同，将后面三项的人名分别整理为：zhaohong_1、zhaohong_2和zhaohong_3。</p><p>最后将整理后的电话簿按照姓名进行从小到大排序，分行输出排序结果。</p><h2 id="评分标准-4"><a class="markdownIt-Anchor" href="#评分标准-4"></a> 评分标准</h2><p>该题要求编程实现通讯录的整理与排序，提交程序文件名为sort.c</p><h2 id="算法分析-4"><a class="markdownIt-Anchor" href="#算法分析-4"></a> 算法分析</h2><p>该题本质是查找算法，外加一个简单的排序。算法复杂度O(n^2)</p><h2 id="代码实现-4"><a class="markdownIt-Anchor" href="#代码实现-4"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 本人本次作业由本人独立实现完成，如有抄袭行为，愿意承担由此带来的一切不良后果*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> phone[<span class="number">30</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">Stu</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    Stu *x = (Stu *)a;</span><br><span class="line">    Stu *y = (Stu *)b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(x-&gt;name, y-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    Stu stu[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>, stu[i].name, stu[i].phone);</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(stu, num, <span class="keyword">sizeof</span>(stu[<span class="number">0</span>]), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; num;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(stu[i].name,stu[j].name)==<span class="number">0</span>&amp;&amp;<span class="built_in">strcmp</span>(stu[i].phone,stu[j].phone)==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memset</span>(stu[j].name, <span class="number">0</span>, <span class="keyword">sizeof</span>(stu[j].name));</span><br><span class="line">                <span class="built_in">memset</span>(stu[j].phone, <span class="number">0</span>, <span class="keyword">sizeof</span>(stu[j].phone));</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(stu[i].name, stu[j].name) == <span class="number">0</span> &amp;&amp;<span class="built_in">strcmp</span>(stu[i].phone, stu[j].phone) != <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="comment">//int count = 1;</span></span><br><span class="line">                len = <span class="built_in">strlen</span>(stu[j].name);</span><br><span class="line">                stu[j].name[len] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">                stu[j].name[len+<span class="number">1</span>] = count + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, stu[i].name,stu[i].phone);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小型图书管理系统"><a class="markdownIt-Anchor" href="#小型图书管理系统"></a> 小型图书管理系统</h1><h2 id="问题描述-5"><a class="markdownIt-Anchor" href="#问题描述-5"></a> 问题描述</h2><p>小明同学特别喜欢买书看书。由于书较多，摆放杂乱，找起来非常麻烦。这学期小明同学上了数据结构与程序设计课后，决定改变这种状况：用C开发一个小型图书管理系统。系统中包含的图书信息有：书名、作者、出版社、出版日期等。首先，图书管理系统对已有的书（原始书库，存放在一个文本文件中）按书名字典序进行（按书名中各字符的ASCII码值由小到大排序）摆放（即将原始无序的图书信息文件生成一个有序的文件，即新书库），以便查找。该管理系统可以对新书库中图书条目进行如下操作：<br />1.录入。新增书录入到书库中（即从输入中读入一条图书信息插入到已排序好的图按书文件相关位置处）<br />2.查找。按书名或书名中关键字信息在书库中查找相关图书信息，若有多本书，按字典序输出。<br />3.删除。输入书名或书名中关键字信息，从书库中查找到相关书并将其删除，并更新书库。</p><h2 id="输入与输出-5"><a class="markdownIt-Anchor" href="#输入与输出-5"></a> 输入与输出</h2><p>【输入形式】<br />原始的图书信息（原始书库）保存在当前目录下的books.txt中。<br />用户操作从控制台读入，首先输入操作功能序号（1代表录入操作，2代表查找操作，3代表删除操作，0代表将已更新的图书信息保存到书库中并退出程序），然后在下一行输入相应的操作信息（录入操作后要输入一条图书信息，查找和删除操作后只要输入书名或书名中部分信息）。程序执行过程中可以进行多次操作，直到退出（输入操作0）程序。<br />要求：<br />1、原始文件中的图书信息与录入的图书信息格式相同，每条图书信息都在一行上，包括书名（不超过50个字符）、作者（不超过20个字符）、出版社（不超过30个字符）和出版日期（不超过10个字符），只由英文字母和下划线组成，用一个空格分隔。图书信息总条数不会超过500.<br />2、下划线字符参加排序。<br />3、图书不会重名。</p><p>【输出形式】<br />进行录入和删除操作，系统会更新图书信息，但不会在控制台窗口显示任何信息。<br />进行查找操作后，将在控制台按书名字典序分行输出查找到的图书信息，书名占50个字符宽度，作者占20个字符宽度，出版社占30个字符宽度，出版日期占10个字符宽度，都靠左对齐输出。<br />最终按字典排序的图书信息保存在当前目录下的ordered.txt中，每条图书信息占一行，格式与查找输出的图书信息相同。</p><p>【样例输入】<br />假设books.txt中保存的原始图书信息为：<br />The_C_programming_language Kernighan Prentice_Hall 1988<br />Programming_in_C Yin_Bao_Lin China_Machine_Press 2013<br />Data_structures_and_Algorithm_Analysis_in_C Mark_Allen_Weiss Addison_Wesley 1997<br />ANSI_and_ISO_Standard_c Plauger Microsoft_Press 1992<br />Data_structures_and_program_design_in_C Robert_Kruse Pearson_Education 1997<br />Computer_network_architectures Anton_Meijer Computer_Science_Press 1983<br />C_programming_guidelines Thomas_Plum Prentice_Hall 1984<br />Data_structures_using_C Tenenbaum Prentice_Hall 1990<br />Operating_system_concepts Peterson Addison_Wesley 1983<br />Computer_networks_and_internets Douglas_E_Come Electronic_Industry 2017<br />用户控制台输入信息为：<br />1<br />Data_structures_and_C_programs Christopher Addison_Wesley 1988<br />2<br />structure<br />1<br />The_C_programming_tutor Leon_A_Wortman R_J_Brady 1984<br />2<br />rogram<br />3<br />rogramming<br />0<br />【样例输出】<br />用户输入“2 structure”后，控制台输出：<br /><img src="https://cdn.jsdelivr.net/gh/LITNUTww/picturedemo/img/1522241979814085793.jpg" alt="" /><br />用户输入“2 rogram”后，控制台输出：<br /><img src="https://cdn.jsdelivr.net/gh/LITNUTww/picturedemo/img/1522242028530059906.jpg" alt="" /><br />ordered.txt文件内容为：<br /><img src="https://cdn.jsdelivr.net/gh/LITNUTww/picturedemo/img/1522242072422069649.jpg" alt="" /></p><h2 id="样例说明-5"><a class="markdownIt-Anchor" href="#样例说明-5"></a> 样例说明</h2><p>【样例说明】<br />先读入books.txt中的10条图书信息，按照书名进行字典序排序；用户进行了五次操作，然后退出：第一次操作是插入了一条图书信息，这时有11条图书信息，按书名字典序排序为：<br />ANSI_and_ISO_Standard_c Plauger Microsoft_Press 1992<br />C_programming_guidelines Thomas_Plum Prentice_Hall 1984<br />Computer_network_architectures Anton_Meijer Computer_Science_Press 1983<br />Computer_networks_and_internets Douglas_E_Come Electronic_Industry 2017<br />Data_structures_and_Algorithm_Analysis_in_C Mark_Allen_Weiss Addison_Wesley 1997<br />Data_structures_and_C_programs Christopher Addison_Wesley 1988<br />Data_structures_and_program_design_in_C Robert_Kruse Pearson_Education 1997<br />Data_structures_using_C Tenenbaum Prentice_Hall 1990<br />Operating_system_concepts Peterson Addison_Wesley 1983<br />Programming_in_C Yin_Bao_Lin China_Machine_Press 2013<br />The_C_programming_language Kernighan Prentice_Hall 1988<br />第二次操作是查找书名包含structure的图书，有4本图书信息按照格式要求输出到屏幕；第三次操作又插入了一条图书信息，这时有12条图书信息；第四次操作查找书名包含rogram的图书，有6本图书信息按照格式要求输出到屏幕；第五次操作是删除书名包含rogramming的图书信息，有四条图书信息要删除，剩下八条图书信息；最后退出程序前将剩余的八条图书信息按照格式要求存储在ordered.txt文件中。</p><h2 id="评分标准-5"><a class="markdownIt-Anchor" href="#评分标准-5"></a> 评分标准</h2><p>该程序要求编写图书管理系统。提交程序文件名为books.c</p><h2 id="代码实现-5"><a class="markdownIt-Anchor" href="#代码实现-5"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">books</span>          //结构体表示每一本图书</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">80</span>];</span><br><span class="line">    <span class="type">char</span> author[<span class="number">50</span>];</span><br><span class="line">    <span class="type">char</span> press[<span class="number">50</span>];</span><br><span class="line">    <span class="type">char</span> year[<span class="number">15</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">books</span> <span class="title">books</span>;</span></span><br><span class="line">books book[<span class="number">510</span>];</span><br><span class="line"><span class="type">int</span> books_num; <span class="comment">//图书的本数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    books *x = (books *)a;</span><br><span class="line">    books *y = (books *)b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(x-&gt;name, y-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// books book_new[1];</span></span><br><span class="line">    <span class="built_in">memset</span>(book[books_num].name, <span class="number">0</span>, <span class="keyword">sizeof</span>(book[books_num].name));</span><br><span class="line">    <span class="built_in">memset</span>(book[books_num].author, <span class="number">0</span>, <span class="keyword">sizeof</span>(book[books_num].author));</span><br><span class="line">    <span class="built_in">memset</span>(book[books_num].press, <span class="number">0</span>, <span class="keyword">sizeof</span>(book[books_num].press));</span><br><span class="line">    <span class="built_in">memset</span>(book[books_num].year, <span class="number">0</span>, <span class="keyword">sizeof</span>(book[books_num].year));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %s %s %s&quot;</span>, book[books_num].name, book[books_num].author, book[books_num].press, book[books_num].year);</span><br><span class="line">    books_num++;</span><br><span class="line">    qsort(book, books_num, <span class="keyword">sizeof</span>(book[<span class="number">0</span>]), cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">search</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">60</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; books_num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(book[i].name, str) != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-50s%-20s%-30s%-10s\n&quot;</span>, book[i].name, book[i].author, book[i].press, book[i].year);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delet</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> str[<span class="number">60</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; books_num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(book[i].name, str) != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(book[i].name, <span class="number">0</span>, <span class="keyword">sizeof</span>(book[i].name));</span><br><span class="line">            <span class="built_in">memset</span>(book[i].author, <span class="number">0</span>, <span class="keyword">sizeof</span>(book[i].author));</span><br><span class="line">            <span class="built_in">memset</span>(book[i].press, <span class="number">0</span>, <span class="keyword">sizeof</span>(book[i].press));</span><br><span class="line">            <span class="built_in">memset</span>(book[i].year, <span class="number">0</span>, <span class="keyword">sizeof</span>(book[i].year));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">operation</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        input();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        search();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        delet();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    FILE *fp, *gp;</span><br><span class="line">    fp = fopen(<span class="string">&quot;books.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    gp = fopen(<span class="string">&quot;ordered.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span> || gp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;you cannot open this file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s %s %s %s&quot;</span>, book[i].name, book[i].author, book[i].press, book[i].year) != EOF) <span class="comment">// scanf(&quot;%s %s %s %s&quot;, book[i].name, book[i].author, book[i].press, book[i].year) != EOF) // fscanf(fp,&quot;%s %s %s %d&quot;,book[i].name,book[i].author,book[i].press,&amp;book[i].year)!=NULL)</span></span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        books_num = i;</span><br><span class="line">        qsort(book, books_num, <span class="keyword">sizeof</span>(book[<span class="number">0</span>]), cmp);</span><br><span class="line">        <span class="comment">/*for (i = 0; i &lt; num;i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%-50s%-20s%-30s%-10d\n&quot;, book[i].name, book[i].author, book[i].press, book[i].year);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> caozuo;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;caozuo);</span><br><span class="line">            <span class="keyword">if</span> (caozuo != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                operation(caozuo);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; books_num; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">fprintf</span>(gp, <span class="string">&quot;%-50s%-20s%-30s%-10s\n&quot;</span>, book[i].name, book[i].author, book[i].press, book[i].year); <span class="comment">// printf(&quot;%-50s%-20s%-30s%-10s\n&quot;, book[i].name, book[i].author, book[i].press, book[i].year);</span></span><br><span class="line">                &#125;</span><br><span class="line">                fclose(fp);</span><br><span class="line">                fclose(gp);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*for (i = 0; i &lt; books_num; i++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                printf(&quot;%-50s%-20s%-30s%-10d\n&quot;, book[i].name, book[i].author, book[i].press, book[i].year);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUAA 数据结构第一次作业</title>
      <link href="/2022/03/10/BUAA_1st_assmt/"/>
      <url>/2022/03/10/BUAA_1st_assmt/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>本系列是BUAA数据结构与程序设计课程课后作业的分析与讨论，旨在对代码和思想进行总结和归纳，便于日后回顾。也为需要的朋友们提供参考。<strong>（切忌抄袭，BUAA有非常严格的查重系统！）</strong> <strong>相关参考资料会以链接的形式放在文字中间。</strong></p><h1 id="扩展字符a"><a class="markdownIt-Anchor" href="#扩展字符a"></a> 扩展字符A</h1><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>从键盘输入包含扩展符’-'的字符串，将其扩展为等价的完整字符，例如将a-d扩展为abcd，并输出扩展后的字符串。</p><p>要求：只处理[a-z]、[A-Z]、[0-9]范围内的字符扩展，即只有当扩展符前后的字符同时是小写字母、大写字母或数字，并且扩展符后的字符大于扩展符前的字符时才进行扩展，其它情况不进行扩展，原样输出。例如：a-R、D-e、0-b、4-B等字符串都不进行扩展。</p><h2 id="输入与输出"><a class="markdownIt-Anchor" href="#输入与输出"></a> 输入与输出</h2><p>【输入形式】<br />从键盘输入包含扩展符的字符串<br />【输出形式】<br />输出扩展后的字符串</p><p>【输入样例1】<br />ADEa-g-m02<br />【输出样例1】<br />ADEabcdefghijklm02</p><p>【输入样例2】<br />cdeT-bcd<br />【输出样例2】<br />cdeT-bcd</p><h2 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h2><p>将样例1的输入ADEa-g-m02扩展为：ADEabcdefghijklm02；样例2的输入cdeT-bcd中，扩展符前的字符为大写字母，扩展符后的字符为小写字母，不在同一范围内，所以不进行扩展。</p><h2 id="评分标准"><a class="markdownIt-Anchor" href="#评分标准"></a> 评分标准</h2><p>该题要求扩展字符，提交程序文件expand.c。</p><h2 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h2><p>题目表述很明确，输入字符串后进行遍历，找到<code>-</code>后判断左右两字符是否符合扩展的条件，符合的扩展输出，不符合则按原样输出。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> str[<span class="number">1000</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">expand</span><span class="params">(<span class="type">char</span> [],<span class="type">int</span> )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i]==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">islower</span>(str[i<span class="number">-1</span>])&amp;&amp;<span class="built_in">islower</span>(str[i+<span class="number">1</span>])&amp;&amp;str[i<span class="number">-1</span>]&lt;str[i+<span class="number">1</span>])</span><br><span class="line">                expand(str, i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isupper</span>(str[i<span class="number">-1</span>])&amp;&amp;<span class="built_in">isupper</span>(str[i+<span class="number">1</span>])&amp;&amp;str[i<span class="number">-1</span>]&lt;str[i+<span class="number">1</span>])</span><br><span class="line">                expand(str, i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(str[i<span class="number">-1</span>])&amp;&amp;<span class="built_in">isdigit</span>(str[i+<span class="number">1</span>])&amp;&amp;str[i<span class="number">-1</span>]&lt;str[i+<span class="number">1</span>])</span><br><span class="line">                expand(str, i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">expand</span><span class="params">(<span class="type">char</span> s[],<span class="type">int</span> idx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span> (ch = s[idx - <span class="number">1</span>] + <span class="number">1</span>; ch &lt; s[idx + <span class="number">1</span>]; ch++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：char类型进行加减运算，本质上是对其ASCII码进行运算。<br />详见：<a href="https://blog.csdn.net/unix21/article/details/8606684?utm_medium=distribute.pc_relevant.none-task-blog-2baidujs_baidulandingword~default-1.pc_relevant_antiscanv2&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">https://blog.csdn.net/unix21/article/details/8606684?utm_medium=distribute.pc_relevant.none-task-blog-2baidujs_baidulandingword~default-1.pc_relevant_antiscanv2&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a></p><h1 id="表达式计算无括号"><a class="markdownIt-Anchor" href="#表达式计算无括号"></a> 表达式计算（无括号）</h1><h2 id="问题描述-2"><a class="markdownIt-Anchor" href="#问题描述-2"></a> 问题描述</h2><p>从标准输入中读入一个整数算术运算表达式，如5 - 1 * 2 * 3 + 12 / 2 / 2  = 。计算表达式结果，并输出。</p><h2 id="输入与输出-2"><a class="markdownIt-Anchor" href="#输入与输出-2"></a> 输入与输出</h2><p>【输入形式】<br />在控制台中输入一个以’=’结尾的整数算术运算表达式。</p><p>【输出形式】<br />向控制台输出计算结果（为整数）。</p><p>【样例1输入】<br />5 - 1 * 2 * 3 + 12 / 2 / 2  =</p><p>【样例1输出】<br />2</p><p>【样例2输入】<br />500 =</p><p>【样例2输出】<br />500</p><p>【样例1说明】<br />输入的表达式为5 - 1 * 2 * 3 + 12 / 2 / 2 =，按照整数运算规则，计算结果为2，故输出2。</p><p>【样例2说明】<br />输入的表达式为500 = ，没有运算符参与运算，故直接输出500</p><h2 id="算法提示"><a class="markdownIt-Anchor" href="#算法提示"></a> 算法提示</h2><p>1、可以利用gets函数，读取整行表达式；<br />2、对于空格，可以考虑首先去除表达式中的所有空格<br />3、可以设一计数器用来记录已读取、但未参加运算的运算符的个数，根据该计数器来判断如何进行运算；<br />4、可以设计一函数：实现二元整数算术运算。</p><h2 id="评分标准-2"><a class="markdownIt-Anchor" href="#评分标准-2"></a> 评分标准</h2><p>该题要求输出整数表达式的计算结果，共有5个测试点。上传C语言文件名为example1c.c。</p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：循环读入表达式中的字符，并且实时计算表达式，进行更新。将复杂的表达式拆分成三个数字三个数字一组，进行运算优先级的判断，如果是左边的优先级高，</span></span><br><span class="line"><span class="comment">//就把左边的数和中间的数进行运算，结果传递给左边的数，右边的数值赋给中间的数；如果第二个算符的优先级较高，就计算中间的和右边的数，结果传递给中间的数</span></span><br><span class="line"><span class="comment">//进行下一轮循环，直至最后的符号是‘=’</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">char</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">input_num</span><span class="params">()</span>;</span><br><span class="line"><span class="type">char</span> <span class="title function_">input_op</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left, right, mid; <span class="comment">//左中右三个数</span></span><br><span class="line">    <span class="type">char</span> fro, back; <span class="comment">//前后两个运算符</span></span><br><span class="line">    left = input_num(); <span class="comment">// 读入左边的数</span></span><br><span class="line">    fro = input_op();   <span class="comment">//读入第一个运算符</span></span><br><span class="line">    <span class="keyword">if</span> (fro == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, left); <span class="comment">//第一种情况 500 =</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mid = input_num(); <span class="comment">//不是第一种情况则继续读入之后的运算符和数字</span></span><br><span class="line">        back = input_op();</span><br><span class="line">        <span class="keyword">if</span> (back == <span class="string">&#x27;=&#x27;</span>) <span class="comment">//第二种情况 1 + 1 =</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, calculate(left, mid, fro));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//以下才是混合运算的情况</span></span><br><span class="line">            <span class="keyword">while</span> (back != <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                right = input_num();</span><br><span class="line">                <span class="keyword">if</span> (((fro == <span class="string">&#x27;*&#x27;</span> || fro == <span class="string">&#x27;/&#x27;</span>) &amp;&amp; (back == <span class="string">&#x27;*&#x27;</span> || back == <span class="string">&#x27;/&#x27;</span>)) || ((fro == <span class="string">&#x27;+&#x27;</span> || fro == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (back == <span class="string">&#x27;+&#x27;</span> || back == <span class="string">&#x27;-&#x27;</span>)) || ((fro == <span class="string">&#x27;*&#x27;</span> || fro == <span class="string">&#x27;/&#x27;</span>) &amp;&amp; (back == <span class="string">&#x27;+&#x27;</span> || back == <span class="string">&#x27;-&#x27;</span>)))<span class="comment">//左边运算优先级高</span></span><br><span class="line">                &#123; </span><br><span class="line">                    left = calculate(left, mid, fro);</span><br><span class="line">                    mid = right;</span><br><span class="line">                    fro = back;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((fro == <span class="string">&#x27;+&#x27;</span> || fro == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (back == <span class="string">&#x27;*&#x27;</span> || back == <span class="string">&#x27;/&#x27;</span>))<span class="comment">//右边运算优先级高</span></span><br><span class="line">                &#123;</span><br><span class="line">                    mid = calculate(mid, right, back);</span><br><span class="line">                &#125;</span><br><span class="line">                back = input_op();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, calculate(left, mid, fro));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//独立函数，进行二元计算</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">char</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> resl;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        resl = a + b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        resl = a - b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        resl = a * b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        resl = a / b;</span><br><span class="line">    <span class="keyword">return</span> resl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">input_num</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数：解决空格问题</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">input_op</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> op = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (op == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        op = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> op;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>难点：实时更新表达式的值的算法不好想，人类处理混合运算的时候会优先挑选整个表达式中的<code>*</code>和<code>/</code>运算，算出来之后再算<code>+</code>和<code>-</code>。如果按照这种思路，程序必须遍历整个表达式寻找<code>*</code>和<code>/</code>，并且将字符串形式的字符通过算法转化为整数计算。</p><p>因此我们要充分认识程序相对于人类思维方式的不同，程序的基本结构只有三种，顺序、循环和条件。以上代码的算法就是结合了这三种结构的优势设计的。</p><p>附上第二种解法的代码，转载自：<a href="https://blog.csdn.net/weixin_45927469/article/details/106868644">https://blog.csdn.net/weixin_45927469/article/details/106868644</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> str[<span class="number">1028</span>], fir[<span class="number">1028</span>], type[<span class="number">1028</span>], pmtype[<span class="number">2018</span>];</span><br><span class="line"><span class="type">int</span> numb[<span class="number">1028</span>], pmnumb[<span class="number">1028</span>];</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    fgets(str, <span class="number">1028</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            fir[j++] = str[i];</span><br><span class="line">    &#125; <span class="comment">// printf(&quot;%s&quot;,fir);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, l = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(fir); i++, j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fir[i] == <span class="string">&#x27;+&#x27;</span> || fir[i] == <span class="string">&#x27;-&#x27;</span> || fir[i] == <span class="string">&#x27;*&#x27;</span> || fir[i] == <span class="string">&#x27;/&#x27;</span> ||</span><br><span class="line">            fir[i] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            type[k++] = fir[i];</span><br><span class="line">        <span class="keyword">if</span> (fir[i] &gt;= <span class="number">48</span> &amp;&amp; fir[i] &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> length = <span class="number">1</span>; length &lt; <span class="number">11</span>; length++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fir[i + length] &gt;= <span class="number">48</span> &amp;&amp; fir[i + length] &lt;= <span class="number">57</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> n = <span class="number">1</span>, num = <span class="number">0</span>, w;</span><br><span class="line">                <span class="keyword">for</span> (w = length; w &gt; <span class="number">0</span>; w--) &#123;</span><br><span class="line">                    num += (fir[i + w - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) * n;</span><br><span class="line">                    n *= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                numb[l++] = num;</span><br><span class="line">                i += length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (fir[i + length] &lt; <span class="number">48</span> || fir[i + length] &gt; <span class="number">57</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;strlen(type);i++)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%c &quot;,type[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;strlen(type)+1;i++)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%d &quot;,numb[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(type) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type[i] == <span class="string">&#x27;+&#x27;</span> || type[i] == <span class="string">&#x27;-&#x27;</span> || type[i] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">            pmnumb[j] = numb[i];</span><br><span class="line">            pmtype[j] = type[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type[i] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            numb[i + <span class="number">1</span>] *= numb[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            numb[i + <span class="number">1</span>] = numb[i] / numb[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> put = pmnumb[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(pmtype); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pmtype[i] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            put += pmnumb[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pmtype[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            put -= pmnumb[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, put);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小数形式与科学计数法转换简"><a class="markdownIt-Anchor" href="#小数形式与科学计数法转换简"></a> 小数形式与科学计数法转换（简）</h1><h2 id="问题描述-3"><a class="markdownIt-Anchor" href="#问题描述-3"></a> 问题描述</h2><p>编写一个程序，将用小数表示的浮点数，转换成科学计数法的形式输出。输入的数据没有符号，小数点前后必有数字，且全为有效数据，即小数点后的末尾数字不为0；小数点前若只有一位数字，可以为0，否则小数点前的最高位数字不为0。<br />提示：以字符串形式保存相关数据</p><h2 id="输入与输出-3"><a class="markdownIt-Anchor" href="#输入与输出-3"></a> 输入与输出</h2><p>【输入形式】<br />从控制台输入一小数，最后有回车换行符，所有输入的字符数不会超过100。</p><p>【输出形式】<br />以科学计数法形式输出数据。输出的数据由以下几部分构成：<br />1.底数部分是一个小数或整数，若为小数，则小数点前后必有数字，而且都为有效数字。即：小数点前只有一位大于0的数字，小数点后的末尾数字不能为0。若为整数，则只有一位数字，不带小数点。<br />2.必有小写字母“e”。<br />3.指数部分是一个整数，若大于等于0，则不带正号“+”。若小于0，则需要带负号“-”，且整数的最高位数字不为0。</p><p>【输入样例1】<br />0.000000000000002</p><p>【输出样例1】<br />2e-15</p><p>【输入样例2】<br />8.9845623489651700659</p><p>【输出样例2】<br />8.9845623489651700659e0</p><p>【输入样例3】<br />367298599999093453490394859509568659795603.4</p><p>【输出样例3】<br />3.672985999990934534903948595095686597956034e41</p><h2 id="样例说明-2"><a class="markdownIt-Anchor" href="#样例说明-2"></a> 样例说明</h2><p>以小数形式输入数据，然后转换成科学计数法形式输出。</p><h2 id="评分标准-3"><a class="markdownIt-Anchor" href="#评分标准-3"></a> 评分标准</h2><p>该题要求以科学计数法形式输出数据，提交程序文件名为notation.c。</p><h2 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//科学计数法</span></span><br><span class="line"><span class="comment">/*分情况讨论</span></span><br><span class="line"><span class="comment">首先是小数点前只有一位0的情况：该种情况只需输出小数点后有效数字，指数为0的个数，需要判断是否输出小数点，如果只有一位有效数字，则不输出小数点。</span></span><br><span class="line"><span class="comment">第二种情况是小数点前不是0：指数为小数点前数字的个数减一*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> str[<span class="number">150</span>];</span><br><span class="line"><span class="type">char</span> zhishu[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, count_1 = <span class="number">0</span>, i, j, k;</span><br><span class="line">    <span class="type">char</span> mi;</span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)  <span class="comment">//小数点前只有一位为零</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]&gt;=<span class="string">&#x27;1&#x27;</span>&amp;&amp;str[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count_1++;           <span class="comment">//统计该数字共有几个非零数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; !(str[i] &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;        <span class="comment">//统计该数字第一位有效数字前有几个零</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]); <span class="comment">//输出第一位有效数字</span></span><br><span class="line">        <span class="keyword">if</span>(count_1&gt;<span class="number">1</span>)  <span class="comment">//判断是否输出小数点 像0.0003不输出小数点，0.0342却需要。</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;.&quot;</span>);   </span><br><span class="line">       &#125; </span><br><span class="line">        <span class="keyword">for</span> (i = i + <span class="number">1</span>; i &lt; <span class="built_in">strlen</span>(str); i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);    <span class="comment">//输出剩下的有效数字</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;e-%d&quot;</span>, count);      <span class="comment">//输出指数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">//小数点前非零情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; str[i] != <span class="string">&#x27;.&#x27;</span>; i++)</span><br><span class="line">            ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c.&quot;</span>, str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; <span class="built_in">strlen</span>(str); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;e%d&quot;</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此题不难，想好分类讨论的方案就行了。</p><h1 id="超长整数的减法"><a class="markdownIt-Anchor" href="#超长整数的减法"></a> 超长整数的减法</h1><h2 id="问题描述-4"><a class="markdownIt-Anchor" href="#问题描述-4"></a> 问题描述</h2><p>编写程序实现两个超长正整数（每个最长80位数字）的减法运算。</p><h2 id="输入输出"><a class="markdownIt-Anchor" href="#输入输出"></a> 输入输出</h2><p>【输入形式】</p><p>从键盘读入两个整数，要考虑输入高位可能为0的情况（如00083）。</p><ol><li>第一行是超长正整数A；</li><li>第二行是超长正整数B；</li></ol><p>【输出形式】<br />输出只有一行，是长整数A减去长整数B的运算结果，从高到低依次输出各位数字。要求：若结果为0，则只输出一个0；否则输出的结果的最高位不能为0，并且各位数字紧密输出。</p><p>【输入样例】<br />234098<br />134098703578230056</p><p>【输出样例】<br />-134098703577995958</p><h2 id="样例说明-3"><a class="markdownIt-Anchor" href="#样例说明-3"></a> 样例说明</h2><p>进行两个正整数减法运算， 234098 －134098703578230056 = －134098703577995958。</p><h2 id="评分标准-4"><a class="markdownIt-Anchor" href="#评分标准-4"></a> 评分标准</h2><p>完全正确得20分，每个测试点4分，提交程序文件名为subtract.c。</p><h2 id="代码实现-4"><a class="markdownIt-Anchor" href="#代码实现-4"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del_zeo</span><span class="params">(<span class="type">char</span> *a)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b, <span class="type">int</span> len_1, <span class="type">int</span> len_2)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addzeo</span><span class="params">(<span class="type">int</span> len1, <span class="type">int</span> len2, <span class="type">char</span> *str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span> *a)</span>;</span><br><span class="line"><span class="type">int</span> len; <span class="comment">//商的长度</span></span><br><span class="line"><span class="type">char</span> shang[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> num_1[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> num_2[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> len_1;</span><br><span class="line">    <span class="type">int</span> len_2; <span class="comment">//两个字符串的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    gets(num_1);</span><br><span class="line">    gets(num_2);    <span class="comment">// 输入两个超长整数</span></span><br><span class="line">    del_zeo(num_1); <span class="comment">//如果整数前面有莫名其妙的0，就把它删除了</span></span><br><span class="line">    del_zeo(num_2);</span><br><span class="line">    len_1 = <span class="built_in">strlen</span>(num_1);</span><br><span class="line">    len_2 = <span class="built_in">strlen</span>(num_2);</span><br><span class="line">    size = compare(num_1, num_2, len_1, len_2); <span class="comment">//比较两数的大小</span></span><br><span class="line">    reverse(num_1);</span><br><span class="line">    reverse(num_2);</span><br><span class="line">    len = len_1;</span><br><span class="line">    len = len_1 &gt; len_2 ? len_1 : len_2;</span><br><span class="line">    <span class="keyword">if</span> (len_2 &gt; len_1) <span class="comment">//补零 为减法做准备</span></span><br><span class="line">        addzeo(len_1, len_2, num_1);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (len_2 &lt; len_1)</span><br><span class="line">        addzeo(len_2, len_1, num_2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (size)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//当前者大于后者时，相减为正</span></span><br><span class="line">    &#123;</span><br><span class="line">        subtract(num_1, num_2);</span><br><span class="line">        reverse(shang);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, shang[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        subtract(num_2, num_1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        reverse(shang);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; shang[i] == <span class="string">&#x27;0&#x27;</span>; i++)</span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; len; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, shang[i]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for (int i = 0; i &lt; strlen(num_1); i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%c&quot;, num_1[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del_zeo</span><span class="params">(<span class="type">char</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; a[i] == <span class="string">&#x27;0&#x27;</span>; i++)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="built_in">strlen</span>(a); i++)</span><br><span class="line">        a[j++] = a[i];</span><br><span class="line">    a[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比大小函数  输出1，前者大后者小，相减为正 ；输出0，后者大前者小，相减为负；输出2，相等</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b, <span class="type">int</span> len_1, <span class="type">int</span> len_2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len_1 &lt; len_2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (len_2 &lt; len_1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len_1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; b[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串反转函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">strlen</span>(a) - <span class="number">1</span>, j = <span class="number">0</span>; i &gt; j; i--, j++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[j];</span><br><span class="line">        a[j] = a[i];</span><br><span class="line">        a[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//补零函数：将反转之后的长度较小的字符串补零之与长度较长的字符串相同的长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addzeo</span><span class="params">(<span class="type">int</span> len1, <span class="type">int</span> len2, <span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1; i &lt; len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法函数,计算大减小。算法是列竖式，一位一位减，不够了借位，从字符串的末尾开始减</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, x, y;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = a[k] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        y = b[k] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= y)</span><br><span class="line">            shang[k] = x - y + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            shang[k] = x + <span class="number">10</span> - y + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            a[k + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    shang[k] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全排列数生成"><a class="markdownIt-Anchor" href="#全排列数生成"></a> 全排列数生成</h1><h2 id="问题描述-5"><a class="markdownIt-Anchor" href="#问题描述-5"></a> 问题描述</h2><p>输入整数N( 1 &lt;= N &lt;= 10 )，生成从1~N所有整数的全排列</p><h2 id="输入与输出-4"><a class="markdownIt-Anchor" href="#输入与输出-4"></a> 输入与输出</h2><p>输入形式】输入整数N。<br />【输出形式】输出有N!行，每行都是从1~N所有整数的一个全排列，各整数之间以空格分隔。各行上的全排列不重复。输出各行遵循“小数优先”原则, 在各全排列中，较小的数尽量靠前输出。如果将每行上的输出看成一个数字，则所有输出构成升序数列。具体格式见输出样例。<br />【样例输入1】1<br />【样例输出1】1<br />【样例说明1】输入整数N=1，其全排列只有一种。<br />【样例输入2】3<br />【样例输出2】<br />1 2 3<br />1 3 2<br />2 1 3<br />2 3 1<br />3 1 2<br />3 2 1<br />【样例说明2】输入整数N=3，要求整数1、2、3的所有全排列, 共有N!=6行。且先输出1开头的所有排列数，再输出2开头的所有排列数，最后输出3开头的所有排列数。在以1开头的所有全排列中同样遵循此原则。<br />【样例输入3】10<br />【样例输出3】<br />1 2 3 4 5 6 7 8 9 10<br />1 2 3 4 5 6 7 8 10 9<br />1 2 3 4 5 6 7 9 8 10<br />1 2 3 4 5 6 7 9 10 8<br />1 2 3 4 5 6 7 10 8 9<br />1 2 3 4 5 6 7 10 9 8<br />1 2 3 4 5 6 8 7 9 10<br />1 2 3 4 5 6 8 7 10 9<br />1 2 3 4 5 6 8 9 7 10<br />1 2 3 4 5 6 8 9 10 7<br />……………………</p><h2 id="运行时限"><a class="markdownIt-Anchor" href="#运行时限"></a> 运行时限</h2><p>要求每次运行时间限制在20秒之内。超出该时间则认为程序错误。提示：当N增大时，运行时间将急剧增加。在编程时要注意尽量优化算法，提高运行效率。</p><h2 id="评分标准-5"><a class="markdownIt-Anchor" href="#评分标准-5"></a> 评分标准</h2><p>该题要求输出若干行整数。</p><h2 id="代码实现-5"><a class="markdownIt-Anchor" href="#代码实现-5"></a> 代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成全排列</span></span><br><span class="line"><span class="comment">//采用回溯算法，生成排列就输出。然后回溯到上层，递归结束的条件是递归层数为最大数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">500</span>];</span><br><span class="line"><span class="type">int</span> temp[<span class="number">500</span>]; <span class="comment">// 该数组编号指代全排列数列中的每一个数</span></span><br><span class="line">               <span class="comment">// 置1则已经使用过，没有使用过置0</span></span><br><span class="line"><span class="type">int</span> max;</span><br><span class="line"><span class="type">void</span> <span class="title function_">permutation</span><span class="params">(<span class="type">int</span> depth)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (depth == max + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= max; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历n个数，没用过将之放进array里面，然后置1，表示已经用过，直到最终生成一个全排列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= max; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">array</span>[depth] = i;       <span class="comment">//</span></span><br><span class="line">            temp[i] = <span class="number">1</span>;            <span class="comment">//标记该数字已经用过。</span></span><br><span class="line">            permutation(depth + <span class="number">1</span>); <span class="comment">//该处产生递归，层层深入会直接生成一个全排列输出，生成全排列后层层返回</span></span><br><span class="line">            temp[i] = <span class="number">0</span>;            <span class="comment">// 这一步比较难理解，每一层permutation return 之后进入这一步，将最后一次使用的数字置零，是一个回溯的步骤</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max);</span><br><span class="line">    permutation(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全排列数的生成属于“树”的内容，常用算法有两种，广度优先遍历和深度优先遍历。详见：<a href="https://blog.csdn.net/zhouEnshen/article/details/116244724">https://blog.csdn.net/zhouEnshen/article/details/116244724</a><br />这个题目需要多调试，看看数据结构究竟是怎么样的，递归返回到了什么地方。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么我要写Blog</title>
      <link href="/2022/03/08/hello-world/"/>
      <url>/2022/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>表达是人的愿望。在今天看来，写作并非是最高效的，但却是最有头脑的。有才华的人一定有很多想要表达的东西。</p><p>我们每一天都能遇到很多的人和事，大部分都匆匆而过，只有很少，或是灵感，或是反思，能再记忆中留下印记。</p><p>有了新想法，新点子，第二天就忘了；今天备战高考的学弟问了一个问题，回答过程中自己的认识也有所提高，很值得记录下来；今天做了一道比较难的算法题，解法很有新意，但不久之后就忘了。和好朋友吹自己做了怎样怎样牛逼的梦，结果也就这么两个人知道。</p><p>也许，多年后回头，能够再次感受那充满青春的大学时光，记忆要是能够在清晰一点多好。</p><p>有的人运营微信公众号，在里面记录自己的生活；有的人创建抖音号，用短视频抓拍有趣的时光。写作，我认为是最适合有自己的学习和工作但同时有一点闲时间的人的一种表现形式。为什么不用短视频，因为看短视频的成本很低，人心比较浮躁，很难静下心来去认真品味。阅读就不一样，愿意写作和阅读的人，是渴求知识的，是探索生活的，是动脑子的。我希望自己是这一部分人，也希望和这一部分人交朋友。如果您和我有一样的想法，我会非常开心。</p><p>为什么要建博客？作为软件工程专业的学生连小小的博客都不会建真的是太逊了。里面的内容有机会也会上传至CSDN，简书，公众号等平台，自己的博客就是自己的一个DIY空间，不必遵循各大平台的规则和用户的喜好。现实里买不起房，互联网上却能搭一个“房子”，何乐而不为？😄</p>]]></content>
      
      
      <categories>
          
          <category> 生活&amp;感悟 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
